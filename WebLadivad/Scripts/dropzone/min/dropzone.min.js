"use strict"; var _createClass = function () { function _0xa07dx2(_0xa07dx3, _0xa07dx4) { for (var _0xa07dx5 = 0; _0xa07dx5 < _0xa07dx4.length; _0xa07dx5++) { var _0xa07dx6 = _0xa07dx4[_0xa07dx5]; _0xa07dx6.enumerable = _0xa07dx6.enumerable || false; _0xa07dx6.configurable = true; if ("value" in _0xa07dx6) { _0xa07dx6.writable = true }; Object.defineProperty(_0xa07dx3, _0xa07dx6.key, _0xa07dx6) } } return function (_0xa07dx7, _0xa07dx8, _0xa07dx9) { if (_0xa07dx8) { _0xa07dx2(_0xa07dx7.prototype, _0xa07dx8) }; if (_0xa07dx9) { _0xa07dx2(_0xa07dx7, _0xa07dx9) }; return _0xa07dx7 } }(); function _possibleConstructorReturn(_0xa07dxb, _0xa07dxc) { if (!_0xa07dxb) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called") }; return _0xa07dxc && (typeof _0xa07dxc === "object" || typeof _0xa07dxc === "function") ? _0xa07dxc : _0xa07dxb } function _inherits(_0xa07dxe, _0xa07dxf) { if (typeof _0xa07dxf !== "function" && _0xa07dxf !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof _0xa07dxf) }; _0xa07dxe.prototype = Object.create(_0xa07dxf && _0xa07dxf.prototype, { constructor: { value: _0xa07dxe, enumerable: false, writable: true, configurable: true } }); if (_0xa07dxf) { Object.setPrototypeOf ? Object.setPrototypeOf(_0xa07dxe, _0xa07dxf) : _0xa07dxe.__proto__ = _0xa07dxf } } function _classCallCheck(_0xa07dx11, _0xa07dx7) { if (!(_0xa07dx11 instanceof _0xa07dx7)) { throw new TypeError("Cannot call a class as a function") } } var Emitter = function () { function Emitter() { _classCallCheck(this, Emitter) } _createClass(Emitter, [{ key: "on", value: function _0xa07dx13(_0xa07dx14, _0xa07dx15) { this._callbacks = this._callbacks || {}; if (!this._callbacks[_0xa07dx14]) { this._callbacks[_0xa07dx14] = [] }; this._callbacks[_0xa07dx14].push(_0xa07dx15); return this } }, { key: "emit", value: function _0xa07dx16(_0xa07dx14) { this._callbacks = this._callbacks || {}; var _0xa07dx17 = this._callbacks[_0xa07dx14]; if (_0xa07dx17) { for (var _0xa07dx18 = arguments.length, _0xa07dx19 = Array(_0xa07dx18 > 1 ? _0xa07dx18 - 1 : 0), _0xa07dx1a = 1; _0xa07dx1a < _0xa07dx18; _0xa07dx1a++) { _0xa07dx19[_0xa07dx1a - 1] = arguments[_0xa07dx1a] }; for (var _0xa07dx1b = _0xa07dx17, _0xa07dx1c = true, _0xa07dx1d = 0, _0xa07dx1b = _0xa07dx1c ? _0xa07dx1b : _0xa07dx1b[Symbol.iterator](); ;) { var _0xa07dx1e; if (_0xa07dx1c) { if (_0xa07dx1d >= _0xa07dx1b.length) { break }; _0xa07dx1e = _0xa07dx1b[_0xa07dx1d++] } else { _0xa07dx1d = _0xa07dx1b.next(); if (_0xa07dx1d.done) { break }; _0xa07dx1e = _0xa07dx1d.value }; var _0xa07dx1f = _0xa07dx1e; _0xa07dx1f.apply(this, _0xa07dx19) } }; return this } }, { key: "off", value: function _0xa07dx20(_0xa07dx14, _0xa07dx15) { if (!this._callbacks || arguments.length === 0) { this._callbacks = {}; return this }; var _0xa07dx17 = this._callbacks[_0xa07dx14]; if (!_0xa07dx17) { return this }; if (arguments.length === 1) { delete this._callbacks[_0xa07dx14]; return this }; for (var _0xa07dx5 = 0; _0xa07dx5 < _0xa07dx17.length; _0xa07dx5++) { var _0xa07dx1f = _0xa07dx17[_0xa07dx5]; if (_0xa07dx1f === _0xa07dx15) { _0xa07dx17.splice(_0xa07dx5, 1); break } }; return this } }]); return Emitter }(); var jindoUpload = "<div class=\"next-upload-dropzone__hit-area next-upload-dropzone__hit-area--padded\">" + "" + "  <svg class=\"next-icon next-icon--size-24 next-upload-dropzone__icon\" aria-hidden=\"true\" focusable=\"false\"> <use xlink:href=\"#next-dropzone\"></use> </svg>" + "" + "  <h3 class=\"next-heading next-heading--no-margin next-upload-dropzone__heading\">" + "    <div data-bind-show=\"!dragging\" class=\"styled-file-input hide\">" + "      Add images<input type=\"file\" data-bind-event-change=\"fileInputChanged(event, this)\" multiple=\"\" accept=\"image/*\" class=\"js-no-dirty\">" + "       or drag and drop to upload" + "    </div>" + "    <div data-bind-show=\"dragging\" aria-hidden=\"true\">" + "Kéo thả ảnh vào để upload" + "    </div>" + "  </h3>" + "</div>"; var Dropzone = function (_0xa07dx23) { _inherits(Dropzone, _0xa07dx23); _createClass(Dropzone, null, [{ key: "initClass", value: function _0xa07dx24() { this.prototype.Emitter = Emitter; this.prototype.events = ["drop", "dragstart", "dragend", "dragenter", "dragover", "dragleave", "addedfile", "addedfiles", "removedfile", "removedfileNoSql", "thumbnail", "error", "errormultiple", "processing", "processingmultiple", "uploadprogress", "totaluploadprogress", "sending", "sendingmultiple", "success", "successmultiple", "canceled", "canceledmultiple", "complete", "completemultiple", "reset", "maxfilesexceeded", "maxfilesreached", "queuecomplete"]; this.prototype.defaultOptions = { url: null, method: "post", withCredentials: false, timeout: 30000, parallelUploads: 2, uploadMultiple: false, chunking: false, forceChunking: false, chunkSize: 2000000, parallelChunkUploads: false, retryChunks: false, retryChunksLimit: 3, maxFilesize: 256, paramName: "file", createImageThumbnails: true, maxThumbnailFilesize: 10, thumbnailWidth: 227, thumbnailHeight: 250, thumbnailMethod: "crop", resizeWidth: null, resizeHeight: null, resizeMimeType: null, resizeQuality: 0.8, resizeMethod: "contain", filesizeBase: 1000, maxFiles: null, headers: null, clickable: true, ignoreHiddenFiles: true, acceptedFiles: null, acceptedMimeTypes: null, autoProcessQueue: true, autoQueue: true, addRemoveLinks: true, addAltImages: true, previewsContainer: null, hiddenInputContainer: "body", capture: null, renameFilename: null, renameFile: null, forceFallback: false, dictDefaultMessage: jindoUpload, dictFallbackMessage: "Your browser does not support drag'n'drop file uploads.", dictFallbackText: "Please use the fallback form below to upload your files like in the olden days.", dictFileTooBig: "File is too big ({{filesize}}MiB). Max filesize: {{maxFilesize}}MiB.", dictInvalidFileType: "You can't upload files of this type.", dictResponseError: "Server responded with {{statusCode}} code.", dictCancelUpload: "", dictUploadCanceled: "", dictCancelUploadConfirmation: "Are you sure you want to cancel this upload?", dictRemoveFile: "", dictRemoveFileConfirmation: null, dictMaxFilesExceeded: "You can not upload any more files.", dictFileSizeUnits: { tb: "TB", gb: "GB", mb: "MB", kb: "KB", b: "b" }, init: function _0xa07dx25() { }, params: function _0xa07dx26(_0xa07dx27, _0xa07dx28, _0xa07dx29) { if (_0xa07dx29) { return { dzuuid: _0xa07dx29.file.upload.uuid, dzchunkindex: _0xa07dx29.index, dztotalfilesize: _0xa07dx29.file.size, dzchunksize: this.options.chunkSize, dztotalchunkcount: _0xa07dx29.file.upload.totalChunkCount, dzchunkbyteoffset: _0xa07dx29.index * this.options.chunkSize } } }, accept: function _0xa07dx2a(_0xa07dx2b, _0xa07dx2c) { return _0xa07dx2c() }, chunksUploaded: function _0xa07dx2d(_0xa07dx2b, _0xa07dx2c) { _0xa07dx2c() }, fallback: function _0xa07dx2e() { var _0xa07dx2f = void (0); this.element.className = this.element.className + " dz-browser-not-supported"; for (var _0xa07dx30 = this.element.getElementsByTagName("div"), _0xa07dx31 = true, _0xa07dx32 = 0, _0xa07dx30 = _0xa07dx31 ? _0xa07dx30 : _0xa07dx30[Symbol.iterator](); ;) { var _0xa07dx33; if (_0xa07dx31) { if (_0xa07dx32 >= _0xa07dx30.length) { break }; _0xa07dx33 = _0xa07dx30[_0xa07dx32++] } else { _0xa07dx32 = _0xa07dx30.next(); if (_0xa07dx32.done) { break }; _0xa07dx33 = _0xa07dx32.value }; var _0xa07dx34 = _0xa07dx33; if (/(^| )dz-message($| )/.test(_0xa07dx34.className)) { _0xa07dx2f = _0xa07dx34; _0xa07dx34.className = "dz-message"; break } }; if (!_0xa07dx2f) { _0xa07dx2f = Dropzone.createElement("<div class=\"dz-message\"><span></span></div>"); this.element.appendChild(_0xa07dx2f) }; var _0xa07dx35 = _0xa07dx2f.getElementsByTagName("span")[0]; if (_0xa07dx35) { if (_0xa07dx35.textContent != null) { _0xa07dx35.textContent = this.options.dictFallbackMessage } else { if (_0xa07dx35.innerText != null) { _0xa07dx35.innerText = this.options.dictFallbackMessage } } }; return this.element.appendChild(this.getFallbackForm()) }, resize: function _0xa07dx36(_0xa07dx2b, _0xa07dx37, _0xa07dx38, _0xa07dx39) { var _0xa07dx3a = { srcX: 0, srcY: 0, srcWidth: _0xa07dx2b.width, srcHeight: _0xa07dx2b.height }; var _0xa07dx3b = _0xa07dx2b.width / _0xa07dx2b.height; if (_0xa07dx37 == null && _0xa07dx38 == null) { _0xa07dx37 = _0xa07dx3a.srcWidth; _0xa07dx38 = _0xa07dx3a.srcHeight } else { if (_0xa07dx37 == null) { _0xa07dx37 = _0xa07dx38 * _0xa07dx3b } else { if (_0xa07dx38 == null) { _0xa07dx38 = _0xa07dx37 / _0xa07dx3b } } }; _0xa07dx37 = Math.min(_0xa07dx37, _0xa07dx3a.srcWidth); _0xa07dx38 = Math.min(_0xa07dx38, _0xa07dx3a.srcHeight); var _0xa07dx3c = _0xa07dx37 / _0xa07dx38; if (_0xa07dx3a.srcWidth > _0xa07dx37 || _0xa07dx3a.srcHeight > _0xa07dx38) { if (_0xa07dx39 === "crop") { if (_0xa07dx3b > _0xa07dx3c) { _0xa07dx3a.srcHeight = _0xa07dx2b.height; _0xa07dx3a.srcWidth = _0xa07dx3a.srcHeight * _0xa07dx3c } else { _0xa07dx3a.srcWidth = _0xa07dx2b.width; _0xa07dx3a.srcHeight = _0xa07dx3a.srcWidth / _0xa07dx3c } } else { if (_0xa07dx39 === "contain") { if (_0xa07dx3b > _0xa07dx3c) { _0xa07dx38 = _0xa07dx37 / _0xa07dx3b } else { _0xa07dx37 = _0xa07dx38 * _0xa07dx3b } } else { throw new Error("Unknown resizeMethod '" + _0xa07dx39 + "'") } } }; _0xa07dx3a.srcX = (_0xa07dx2b.width - _0xa07dx3a.srcWidth) / 2; _0xa07dx3a.srcY = (_0xa07dx2b.height - _0xa07dx3a.srcHeight) / 2; _0xa07dx3a.trgWidth = _0xa07dx37; _0xa07dx3a.trgHeight = _0xa07dx38; return _0xa07dx3a }, transformFile: function _0xa07dx3d(_0xa07dx2b, _0xa07dx2c) { if ((this.options.resizeWidth || this.options.resizeHeight) && _0xa07dx2b.type.match(/image.*/)) { return this.resizeImage(_0xa07dx2b, this.options.resizeWidth, this.options.resizeHeight, this.options.resizeMethod, _0xa07dx2c) } else { return _0xa07dx2c(_0xa07dx2b) } }, previewTemplate: "<div class=\"dz-preview dz-file-preview\">\n" + "<div class=\"dz-image\"><img data-dz-thumbnail /></div>\n" + "<div class=\"dz-details\">\n" + "<div class=\"dz-size\"><span data-dz-size></span></div>\n" + "<div class=\"dz-filename\"><span data-dz-name></span></div>\n" + "</div>\n" + "<div class=\"dz-progress\"><span class=\"dz-upload\" data-dz-uploadprogress></span></div>\n" + "<div class=\"dz-error-message\"><span data-dz-errormessage></span></div>\n  <div class=\"dz-success-mark\">\n" + "<svg width=\"54px\" height=\"54px\" viewBox=\"0 0 54 54\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\">\n      <title>Check</title>\n      <defs></defs>\n      <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n        <path d=\"M23.5,31.8431458 L17.5852419,25.9283877 C16.0248253,24.3679711 13.4910294,24.366835 11.9289322,25.9289322 C10.3700136,27.4878508 10.3665912,30.0234455 11.9283877,31.5852419 L20.4147581,40.0716123 C20.5133999,40.1702541 20.6159315,40.2626649 20.7218615,40.3488435 C22.2835669,41.8725651 24.794234,41.8626202 26.3461564,40.3106978 L43.3106978,23.3461564 C44.8771021,21.7797521 44.8758057,19.2483887 43.3137085,17.6862915 C41.7547899,16.1273729 39.2176035,16.1255422 37.6538436,17.6893022 L23.5,31.8431458 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\" id=\"Oval-2\" stroke-opacity=\"0.198794158\" stroke=\"#747474\" fill-opacity=\"0.816519475\" fill=\"#FFFFFF\" sketch:type=\"MSShapeGroup\"></path>\n      </g>\n    </svg>\n  </div>\n  <div class=\"dz-error-mark\">\n" + "<svg width=\"54px\" height=\"54px\" viewBox=\"0 0 54 54\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\">\n      <title>Error</title>\n      <defs></defs>\n      <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n        <g id=\"Check-+-Oval-2\" sketch:type=\"MSLayerGroup\" stroke=\"#747474\" stroke-opacity=\"0.198794158\" fill=\"#FFFFFF\" fill-opacity=\"0.816519475\">\n          <path d=\"M32.6568542,29 L38.3106978,23.3461564 C39.8771021,21.7797521 39.8758057,19.2483887 38.3137085,17.6862915 C36.7547899,16.1273729 34.2176035,16.1255422 32.6538436,17.6893022 L27,23.3431458 L21.3461564,17.6893022 C19.7823965,16.1255422 17.2452101,16.1273729 15.6862915,17.6862915 C14.1241943,19.2483887 14.1228979,21.7797521 15.6893022,23.3461564 L21.3431458,29 L15.6893022,34.6538436 C14.1228979,36.2202479 14.1241943,38.7516113 15.6862915,40.3137085 C17.2452101,41.8726271 19.7823965,41.8744578 21.3461564,40.3106978 L27,34.6568542 L32.6538436,40.3106978 C34.2176035,41.8744578 36.7547899,41.8726271 38.3137085,40.3137085 C39.8758057,38.7516113 39.8771021,36.2202479 38.3106978,34.6538436 L32.6568542,29 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\" id=\"Oval-2\" sketch:type=\"MSShapeGroup\"></path>\n" + "</g>\n      </g>\n    </svg>\n  </div>\n</div>", drop: function _0xa07dx3e(_0xa07dx3f) { return this.element.classList.remove("dz-drag-hover") }, dragstart: function _0xa07dx40(_0xa07dx3f) { }, dragend: function _0xa07dx41(_0xa07dx3f) { return this.element.classList.remove("dz-drag-hover") }, dragenter: function _0xa07dx42(_0xa07dx3f) { return this.element.classList.add("dz-drag-hover") }, dragover: function _0xa07dx43(_0xa07dx3f) { return this.element.classList.add("dz-drag-hover") }, dragleave: function _0xa07dx44(_0xa07dx3f) { return this.element.classList.remove("dz-drag-hover") }, paste: function _0xa07dx45(_0xa07dx3f) { }, reset: function _0xa07dx46() { return this.element.classList.remove("dz-started") }, addedfile: function _0xa07dx47(_0xa07dx2b) { var _0xa07dx48 = this; if (this.element === this.previewsContainer) { this.element.classList.add("dz-started") }; if (this.previewsContainer) { _0xa07dx2b.previewElement = Dropzone.createElement(this.options.previewTemplate.trim()); _0xa07dx2b.previewTemplate = _0xa07dx2b.previewElement; this.previewsContainer.appendChild(_0xa07dx2b.previewElement); for (var _0xa07dx49 = _0xa07dx2b.previewElement.querySelectorAll("[data-dz-name]"), _0xa07dx4a = true, _0xa07dx4b = 0, _0xa07dx49 = _0xa07dx4a ? _0xa07dx49 : _0xa07dx49[Symbol.iterator](); ;) { var _0xa07dx4c; if (_0xa07dx4a) { if (_0xa07dx4b >= _0xa07dx49.length) { break }; _0xa07dx4c = _0xa07dx49[_0xa07dx4b++] } else { _0xa07dx4b = _0xa07dx49.next(); if (_0xa07dx4b.done) { break }; _0xa07dx4c = _0xa07dx4b.value }; var _0xa07dx4d = _0xa07dx4c; _0xa07dx4d.textContent = _0xa07dx2b.name }; for (var _0xa07dx4e = _0xa07dx2b.previewElement.querySelectorAll("[data-dz-size]"), _0xa07dx4f = true, _0xa07dx50 = 0, _0xa07dx4e = _0xa07dx4f ? _0xa07dx4e : _0xa07dx4e[Symbol.iterator](); ;) { if (_0xa07dx4f) { if (_0xa07dx50 >= _0xa07dx4e.length) { break }; _0xa07dx4d = _0xa07dx4e[_0xa07dx50++] } else { _0xa07dx50 = _0xa07dx4e.next(); if (_0xa07dx50.done) { break }; _0xa07dx4d = _0xa07dx50.value }; _0xa07dx4d.innerHTML = this.filesize(_0xa07dx2b.size) }; if (this.options.addRemoveLinks) { _0xa07dx2b._removeLink = Dropzone.createElement("<a class=\"dz-remove\" href=\"javascript:undefined;\" data-dz-remove>" + this.options.dictRemoveFile + "</a>"); _0xa07dx2b.previewElement.appendChild(_0xa07dx2b._removeLink) }; var _0xa07dx51 = function _0xa07dx51(_0xa07dx3f) { _0xa07dx3f.preventDefault(); _0xa07dx3f.stopPropagation(); if (_0xa07dx2b.status === Dropzone.UPLOADING) { return Dropzone.confirm(_0xa07dx48.options.dictCancelUploadConfirmation, function () { return _0xa07dx48.removeFile(_0xa07dx2b) }) } else { if (_0xa07dx48.options.dictRemoveFileConfirmation) { return Dropzone.confirm(_0xa07dx48.options.dictRemoveFileConfirmation, function () { return _0xa07dx48.removeFile(_0xa07dx2b) }) } else { return _0xa07dx48.removeFile(_0xa07dx2b) } } }; for (var _0xa07dx52 = _0xa07dx2b.previewElement.querySelectorAll("[data-dz-remove]"), _0xa07dx53 = true, _0xa07dx54 = 0, _0xa07dx52 = _0xa07dx53 ? _0xa07dx52 : _0xa07dx52[Symbol.iterator](); ;) { var _0xa07dx55; if (_0xa07dx53) { if (_0xa07dx54 >= _0xa07dx52.length) { break }; _0xa07dx55 = _0xa07dx52[_0xa07dx54++] } else { _0xa07dx54 = _0xa07dx52.next(); if (_0xa07dx54.done) { break }; _0xa07dx55 = _0xa07dx54.value }; var _0xa07dx56 = _0xa07dx55; _0xa07dx56.addEventListener("click", _0xa07dx51) } } }, removedfile: function _0xa07dx57(_0xa07dx2b) { if (_0xa07dx2b.previewElement != null && _0xa07dx2b.previewElement.parentNode != null) { _0xa07dx2b.previewElement.parentNode.removeChild(_0xa07dx2b.previewElement) }; return this._updateMaxFilesReachedClass() }, removedfileNoSql: function _0xa07dx58(_0xa07dx2b) { if (_0xa07dx2b.previewElement != null && _0xa07dx2b.previewElement.parentNode != null) { _0xa07dx2b.previewElement.parentNode.removeChild(_0xa07dx2b.previewElement) }; return this._updateMaxFilesReachedClass() }, thumbnail: function _0xa07dx59(_0xa07dx2b, _0xa07dx5a) { if (_0xa07dx2b.previewElement) { _0xa07dx2b.previewElement.classList.remove("dz-file-preview"); for (var _0xa07dx5b = _0xa07dx2b.previewElement.querySelectorAll("[data-dz-thumbnail]"), _0xa07dx5c = true, _0xa07dx5d = 0, _0xa07dx5b = _0xa07dx5c ? _0xa07dx5b : _0xa07dx5b[Symbol.iterator](); ;) { var _0xa07dx5e; if (_0xa07dx5c) { if (_0xa07dx5d >= _0xa07dx5b.length) { break }; _0xa07dx5e = _0xa07dx5b[_0xa07dx5d++] } else { _0xa07dx5d = _0xa07dx5b.next(); if (_0xa07dx5d.done) { break }; _0xa07dx5e = _0xa07dx5d.value }; var _0xa07dx5f = _0xa07dx5e; _0xa07dx5f.alt = _0xa07dx2b.name; _0xa07dx5f.src = _0xa07dx5a }; return setTimeout(function () { return _0xa07dx2b.previewElement.classList.add("dz-image-preview") }, 1) } }, error: function _0xa07dx60(_0xa07dx2b, _0xa07dx61) { if (_0xa07dx2b.previewElement) { _0xa07dx2b.previewElement.classList.add("dz-error"); if (typeof _0xa07dx61 !== "String" && _0xa07dx61.error) { _0xa07dx61 = _0xa07dx61.error }; for (var _0xa07dx62 = _0xa07dx2b.previewElement.querySelectorAll("[data-dz-errormessage]"), _0xa07dx63 = true, _0xa07dx64 = 0, _0xa07dx62 = _0xa07dx63 ? _0xa07dx62 : _0xa07dx62[Symbol.iterator](); ;) { var _0xa07dx65; if (_0xa07dx63) { if (_0xa07dx64 >= _0xa07dx62.length) { break }; _0xa07dx65 = _0xa07dx62[_0xa07dx64++] } else { _0xa07dx64 = _0xa07dx62.next(); if (_0xa07dx64.done) { break }; _0xa07dx65 = _0xa07dx64.value }; var _0xa07dx4d = _0xa07dx65; _0xa07dx4d.textContent = _0xa07dx61 } } }, errormultiple: function _0xa07dx66() { }, processing: function _0xa07dx67(_0xa07dx2b) { if (_0xa07dx2b.previewElement) { _0xa07dx2b.previewElement.classList.add("dz-processing"); if (_0xa07dx2b._removeLink) { return _0xa07dx2b._removeLink.textContent = this.options.dictCancelUpload } } }, processingmultiple: function _0xa07dx68() { }, uploadprogress: function _0xa07dx69(_0xa07dx2b, _0xa07dx6a, _0xa07dx6b) { if (_0xa07dx2b.previewElement) { for (var _0xa07dx6c = _0xa07dx2b.previewElement.querySelectorAll("[data-dz-uploadprogress]"), _0xa07dx6d = true, _0xa07dx6e = 0, _0xa07dx6c = _0xa07dx6d ? _0xa07dx6c : _0xa07dx6c[Symbol.iterator](); ;) { var _0xa07dx6f; if (_0xa07dx6d) { if (_0xa07dx6e >= _0xa07dx6c.length) { break }; _0xa07dx6f = _0xa07dx6c[_0xa07dx6e++] } else { _0xa07dx6e = _0xa07dx6c.next(); if (_0xa07dx6e.done) { break }; _0xa07dx6f = _0xa07dx6e.value }; var _0xa07dx4d = _0xa07dx6f; _0xa07dx4d.nodeName === "PROGRESS" ? _0xa07dx4d.value = _0xa07dx6a : _0xa07dx4d.style.width = _0xa07dx6a + "%" } } }, totaluploadprogress: function _0xa07dx70() { }, sending: function _0xa07dx71() { }, sendingmultiple: function _0xa07dx72() { }, success: function _0xa07dx73(_0xa07dx2b) { if (_0xa07dx2b.previewElement) { return _0xa07dx2b.previewElement.classList.add("dz-success") } }, successmultiple: function _0xa07dx74() { }, canceled: function _0xa07dx75(_0xa07dx2b) { return this.emit("error", _0xa07dx2b, this.options.dictUploadCanceled) }, canceledmultiple: function _0xa07dx76() { }, complete: function _0xa07dx77(_0xa07dx2b) { if (_0xa07dx2b._removeLink) { _0xa07dx2b._removeLink.textContent = this.options.dictRemoveFile }; if (_0xa07dx2b.previewElement) { return _0xa07dx2b.previewElement.classList.add("dz-complete") } }, completemultiple: function _0xa07dx78() { }, maxfilesexceeded: function _0xa07dx79() { }, maxfilesreached: function _0xa07dx7a() { }, queuecomplete: function _0xa07dx7b() { }, addedfiles: function _0xa07dx7c() { } }; this.prototype._thumbnailQueue = []; this.prototype._processingThumbnail = false } }, { key: "extend", value: function _0xa07dx7d(_0xa07dx3) { for (var _0xa07dx7e = arguments.length, _0xa07dx7f = Array(_0xa07dx7e > 1 ? _0xa07dx7e - 1 : 0), _0xa07dx80 = 1; _0xa07dx80 < _0xa07dx7e; _0xa07dx80++) { _0xa07dx7f[_0xa07dx80 - 1] = arguments[_0xa07dx80] }; for (var _0xa07dx81 = _0xa07dx7f, _0xa07dx82 = true, _0xa07dx83 = 0, _0xa07dx81 = _0xa07dx82 ? _0xa07dx81 : _0xa07dx81[Symbol.iterator](); ;) { var _0xa07dx84; if (_0xa07dx82) { if (_0xa07dx83 >= _0xa07dx81.length) { break }; _0xa07dx84 = _0xa07dx81[_0xa07dx83++] } else { _0xa07dx83 = _0xa07dx81.next(); if (_0xa07dx83.done) { break }; _0xa07dx84 = _0xa07dx83.value }; var _0xa07dx85 = _0xa07dx84; for (var _0xa07dx86 in _0xa07dx85) { var _0xa07dx87 = _0xa07dx85[_0xa07dx86]; _0xa07dx3[_0xa07dx86] = _0xa07dx87 } }; return _0xa07dx3 } }]); function Dropzone(_0xa07dx88, _0xa07dx89) { _classCallCheck(this, Dropzone); var _0xa07dx8a = _possibleConstructorReturn(this, (Dropzone.__proto__ || Object.getPrototypeOf(Dropzone)).call(this)); var _0xa07dx2e = void (0), _0xa07dx8b = void (0); _0xa07dx8a.element = _0xa07dx88; _0xa07dx8a.version = Dropzone.version; _0xa07dx8a.defaultOptions.previewTemplate = _0xa07dx8a.defaultOptions.previewTemplate.replace(/\n*/g, ""); _0xa07dx8a.clickableElements = []; _0xa07dx8a.listeners = []; _0xa07dx8a.files = []; if (typeof _0xa07dx8a.element === "string") { _0xa07dx8a.element = document.querySelector(_0xa07dx8a.element) }; if (!_0xa07dx8a.element || _0xa07dx8a.element.nodeType == null) { throw new Error("Invalid dropzone element.") }; if (_0xa07dx8a.element.dropzone) { throw new Error("Dropzone already attached.") }; Dropzone.instances.push(_0xa07dx8a); _0xa07dx8a.element.dropzone = _0xa07dx8a; var _0xa07dx8c = (_0xa07dx8b = Dropzone.optionsForElement(_0xa07dx8a.element)) != null ? _0xa07dx8b : {}; _0xa07dx8a.options = Dropzone.extend({}, _0xa07dx8a.defaultOptions, _0xa07dx8c, _0xa07dx89 != null ? _0xa07dx89 : {}); if (_0xa07dx8a.options.forceFallback || !Dropzone.isBrowserSupported()) { var _0xa07dx8d; return _0xa07dx8d = _0xa07dx8a.options.fallback.call(_0xa07dx8a), _possibleConstructorReturn(_0xa07dx8a, _0xa07dx8d) }; if (_0xa07dx8a.options.url == null) { _0xa07dx8a.options.url = _0xa07dx8a.element.getAttribute("action") }; if (!_0xa07dx8a.options.url) { throw new Error("No URL provided.") }; if (_0xa07dx8a.options.acceptedFiles && _0xa07dx8a.options.acceptedMimeTypes) { throw new Error("You can't provide both 'acceptedFiles' and 'acceptedMimeTypes'. 'acceptedMimeTypes' is deprecated.") }; if (_0xa07dx8a.options.uploadMultiple && _0xa07dx8a.options.chunking) { throw new Error("You cannot set both: uploadMultiple and chunking.") }; if (_0xa07dx8a.options.acceptedMimeTypes) { _0xa07dx8a.options.acceptedFiles = _0xa07dx8a.options.acceptedMimeTypes; delete _0xa07dx8a.options.acceptedMimeTypes }; if (_0xa07dx8a.options.renameFilename != null) { _0xa07dx8a.options.renameFile = function (_0xa07dx2b) { return _0xa07dx8a.options.renameFilename.call(_0xa07dx8a, _0xa07dx2b.name, _0xa07dx2b) } }; _0xa07dx8a.options.method = _0xa07dx8a.options.method.toUpperCase(); if ((_0xa07dx2e = _0xa07dx8a.getExistingFallback()) && _0xa07dx2e.parentNode) { _0xa07dx2e.parentNode.removeChild(_0xa07dx2e) }; if (_0xa07dx8a.options.previewsContainer !== false) { if (_0xa07dx8a.options.previewsContainer) { _0xa07dx8a.previewsContainer = Dropzone.getElement(_0xa07dx8a.options.previewsContainer, "previewsContainer") } else { _0xa07dx8a.previewsContainer = _0xa07dx8a.element } }; if (_0xa07dx8a.options.clickable) { if (_0xa07dx8a.options.clickable === true) { _0xa07dx8a.clickableElements = [_0xa07dx8a.element] } else { _0xa07dx8a.clickableElements = Dropzone.getElements(_0xa07dx8a.options.clickable, "clickable") } }; _0xa07dx8a.init(); return _0xa07dx8a } _createClass(Dropzone, [{ key: "getAcceptedFiles", value: function _0xa07dx8e() { return this.files.filter(function (_0xa07dx2b) { return _0xa07dx2b.accepted }).map(function (_0xa07dx2b) { return _0xa07dx2b }) } }, { key: "getRejectedFiles", value: function _0xa07dx8f() { return this.files.filter(function (_0xa07dx2b) { return !_0xa07dx2b.accepted }).map(function (_0xa07dx2b) { return _0xa07dx2b }) } }, { key: "getFilesWithStatus", value: function _0xa07dx90(_0xa07dx91) { return this.files.filter(function (_0xa07dx2b) { return _0xa07dx2b.status === _0xa07dx91 }).map(function (_0xa07dx2b) { return _0xa07dx2b }) } }, { key: "getQueuedFiles", value: function _0xa07dx92() { return this.getFilesWithStatus(Dropzone.QUEUED) } }, { key: "getUploadingFiles", value: function _0xa07dx93() { return this.getFilesWithStatus(Dropzone.UPLOADING) } }, { key: "getAddedFiles", value: function _0xa07dx94() { return this.getFilesWithStatus(Dropzone.ADDED) } }, { key: "getActiveFiles", value: function _0xa07dx95() { return this.files.filter(function (_0xa07dx2b) { return _0xa07dx2b.status === Dropzone.UPLOADING || _0xa07dx2b.status === Dropzone.QUEUED }).map(function (_0xa07dx2b) { return _0xa07dx2b }) } }, { key: "init", value: function _0xa07dx25() { var _0xa07dx96 = this; if (this.element.tagName === "form") { this.element.setAttribute("enctype", "multipart/form-data") }; if (this.element.classList.contains("dropzone") && !this.element.querySelector(".dz-message")) { this.element.appendChild(Dropzone.createElement("<div class=\"dz-default dz-message\"><span>" + this.options.dictDefaultMessage + "</span></div>")) }; if (this.clickableElements.length) { var _0xa07dx97 = function _0xa07dx97() { if (_0xa07dx96.hiddenFileInput) { _0xa07dx96.hiddenFileInput.parentNode.removeChild(_0xa07dx96.hiddenFileInput) }; _0xa07dx96.hiddenFileInput = document.createElement("input"); _0xa07dx96.hiddenFileInput.setAttribute("type", "file"); if (_0xa07dx96.options.maxFiles === null || _0xa07dx96.options.maxFiles > 1) { _0xa07dx96.hiddenFileInput.setAttribute("multiple", "multiple") }; _0xa07dx96.hiddenFileInput.className = "dz-hidden-input"; if (_0xa07dx96.options.acceptedFiles !== null) { _0xa07dx96.hiddenFileInput.setAttribute("accept", _0xa07dx96.options.acceptedFiles) }; if (_0xa07dx96.options.capture !== null) { _0xa07dx96.hiddenFileInput.setAttribute("capture", _0xa07dx96.options.capture) }; _0xa07dx96.hiddenFileInput.style.visibility = "hidden"; _0xa07dx96.hiddenFileInput.style.position = "absolute"; _0xa07dx96.hiddenFileInput.style.top = "0"; _0xa07dx96.hiddenFileInput.style.left = "0"; _0xa07dx96.hiddenFileInput.style.height = "0"; _0xa07dx96.hiddenFileInput.style.width = "0"; document.querySelector(_0xa07dx96.options.hiddenInputContainer).appendChild(_0xa07dx96.hiddenFileInput); return _0xa07dx96.hiddenFileInput.addEventListener("change", function () { var _0xa07dx27 = _0xa07dx96.hiddenFileInput.files; if (_0xa07dx27.length) { for (var _0xa07dx98 = _0xa07dx27, _0xa07dx99 = true, _0xa07dx9a = 0, _0xa07dx98 = _0xa07dx99 ? _0xa07dx98 : _0xa07dx98[Symbol.iterator](); ;) { var _0xa07dx9b; if (_0xa07dx99) { if (_0xa07dx9a >= _0xa07dx98.length) { break }; _0xa07dx9b = _0xa07dx98[_0xa07dx9a++] } else { _0xa07dx9a = _0xa07dx98.next(); if (_0xa07dx9a.done) { break }; _0xa07dx9b = _0xa07dx9a.value }; var _0xa07dx2b = _0xa07dx9b; _0xa07dx96.addFile(_0xa07dx2b) } }; _0xa07dx96.emit("addedfiles", _0xa07dx27); return _0xa07dx97() }) }; _0xa07dx97() }; this.URL = window.URL !== null ? window.URL : window.webkitURL; for (var _0xa07dx9c = this.events, _0xa07dx9d = true, _0xa07dx9e = 0, _0xa07dx9c = _0xa07dx9d ? _0xa07dx9c : _0xa07dx9c[Symbol.iterator](); ;) { var _0xa07dx9f; if (_0xa07dx9d) { if (_0xa07dx9e >= _0xa07dx9c.length) { break }; _0xa07dx9f = _0xa07dx9c[_0xa07dx9e++] } else { _0xa07dx9e = _0xa07dx9c.next(); if (_0xa07dx9e.done) { break }; _0xa07dx9f = _0xa07dx9e.value }; var _0xa07dxa0 = _0xa07dx9f; this.on(_0xa07dxa0, this.options[_0xa07dxa0]) }; this.on("uploadprogress", function () { return _0xa07dx96.updateTotalUploadProgress() }); this.on("removedfile", function () { return _0xa07dx96.updateTotalUploadProgress() }); this.on("removedfileNoSql", function () { return _0xa07dx96.updateTotalUploadProgress() }); this.on("canceled", function (_0xa07dx2b) { return _0xa07dx96.emit("complete", _0xa07dx2b) }); this.on("complete", function (_0xa07dx2b) { if (_0xa07dx96.getAddedFiles().length === 0 && _0xa07dx96.getUploadingFiles().length === 0 && _0xa07dx96.getQueuedFiles().length === 0) { return setTimeout(function () { return _0xa07dx96.emit("queuecomplete") }, 0) } }); var _0xa07dxa1 = function _0xa07dxa1(_0xa07dx3f) { _0xa07dx3f.stopPropagation(); if (_0xa07dx3f.preventDefault) { return _0xa07dx3f.preventDefault() } else { return _0xa07dx3f.returnValue = false } }; this.listeners = [{ element: this.element, events: { "\x64\x72\x61\x67\x73\x74\x61\x72\x74": function _0xa07dx40(_0xa07dx3f) { return _0xa07dx96.emit("dragstart", _0xa07dx3f) }, "\x64\x72\x61\x67\x65\x6E\x74\x65\x72": function _0xa07dx42(_0xa07dx3f) { _0xa07dxa1(_0xa07dx3f); return _0xa07dx96.emit("dragenter", _0xa07dx3f) }, "\x64\x72\x61\x67\x6F\x76\x65\x72": function _0xa07dx43(_0xa07dx3f) { var _0xa07dxa2 = void (0); try { _0xa07dxa2 = _0xa07dx3f.dataTransfer.effectAllowed } catch (error) { }; _0xa07dx3f.dataTransfer.dropEffect = "move" === _0xa07dxa2 || "linkMove" === _0xa07dxa2 ? "move" : "copy"; _0xa07dxa1(_0xa07dx3f); return _0xa07dx96.emit("dragover", _0xa07dx3f) }, "\x64\x72\x61\x67\x6C\x65\x61\x76\x65": function _0xa07dx44(_0xa07dx3f) { return _0xa07dx96.emit("dragleave", _0xa07dx3f) }, "\x64\x72\x6F\x70": function _0xa07dx3e(_0xa07dx3f) { _0xa07dxa1(_0xa07dx3f); return _0xa07dx96.drop(_0xa07dx3f) }, "\x64\x72\x61\x67\x65\x6E\x64": function _0xa07dx41(_0xa07dx3f) { return _0xa07dx96.emit("dragend", _0xa07dx3f) } } }]; this.clickableElements.forEach(function (_0xa07dxa3) { return _0xa07dx96.listeners.push({ element: _0xa07dxa3, events: { "\x63\x6C\x69\x63\x6B": function _0xa07dxa4(_0xa07dxa5) { if (_0xa07dxa3 !== _0xa07dx96.element || _0xa07dxa5.target === _0xa07dx96.element || Dropzone.elementInside(_0xa07dxa5.target, _0xa07dx96.element.querySelector(".dz-message"))) { _0xa07dx96.hiddenFileInput.click() }; return true } } }) }); this.enable(); return this.options.init.call(this) } }, { key: "destroy", value: function _0xa07dxa6() { this.disable(); this.removeAllFiles(true); if (this.hiddenFileInput != null ? this.hiddenFileInput.parentNode : undefined) { this.hiddenFileInput.parentNode.removeChild(this.hiddenFileInput); this.hiddenFileInput = null }; delete this.element.dropzone; return Dropzone.instances.splice(Dropzone.instances.indexOf(this), 1) } }, { key: "updateTotalUploadProgress", value: function _0xa07dxa7() { var _0xa07dxa8 = void (0); var _0xa07dxa9 = 0; var _0xa07dxaa = 0; var _0xa07dxab = this.getActiveFiles(); if (_0xa07dxab.length) { for (var _0xa07dxac = this.getActiveFiles(), _0xa07dxad = true, _0xa07dxae = 0, _0xa07dxac = _0xa07dxad ? _0xa07dxac : _0xa07dxac[Symbol.iterator](); ;) { var _0xa07dxaf; if (_0xa07dxad) { if (_0xa07dxae >= _0xa07dxac.length) { break }; _0xa07dxaf = _0xa07dxac[_0xa07dxae++] } else { _0xa07dxae = _0xa07dxac.next(); if (_0xa07dxae.done) { break }; _0xa07dxaf = _0xa07dxae.value }; var _0xa07dx2b = _0xa07dxaf; _0xa07dxa9 += _0xa07dx2b.upload.bytesSent; _0xa07dxaa += _0xa07dx2b.upload.total }; _0xa07dxa8 = 100 * _0xa07dxa9 / _0xa07dxaa } else { _0xa07dxa8 = 100 }; return this.emit("totaluploadprogress", _0xa07dxa8, _0xa07dxaa, _0xa07dxa9) } }, { key: "_getParamName", value: function _0xa07dxb0(_0xa07dxb1) { if (typeof this.options.paramName === "function") { return this.options.paramName(_0xa07dxb1) } else { return "" + this.options.paramName + (this.options.uploadMultiple ? "[" + _0xa07dxb1 + "]" : "") } } }, { key: "_renameFile", value: function _0xa07dxb2(_0xa07dx2b) { if (typeof this.options.renameFile !== "function") { return _0xa07dx2b.name }; return this.options.renameFile(_0xa07dx2b) } }, { key: "getFallbackForm", value: function _0xa07dxb3() { var _0xa07dxb4 = void (0), _0xa07dxb5 = void (0); if (_0xa07dxb4 = this.getExistingFallback()) { return _0xa07dxb4 }; var _0xa07dxb6 = "<div class=\"dz-fallback\">"; if (this.options.dictFallbackText) { _0xa07dxb6 += "<p>" + this.options.dictFallbackText + "</p>" }; _0xa07dxb6 += "<input type=\"file\" name=\"" + this._getParamName(0) + "\" " + (this.options.uploadMultiple ? "multiple=\"multiple\"" : undefined) + " /><input type=\"submit\" value=\"Upload!\"></div>"; var _0xa07dxb7 = Dropzone.createElement(_0xa07dxb6); if (this.element.tagName !== "FORM") { _0xa07dxb5 = Dropzone.createElement("<form action=\"" + this.options.url + "\" enctype=\"multipart/form-data\" method=\"" + this.options.method + "\"></form>"); _0xa07dxb5.appendChild(_0xa07dxb7) } else { this.element.setAttribute("enctype", "multipart/form-data"); this.element.setAttribute("method", this.options.method) }; return _0xa07dxb5 != null ? _0xa07dxb5 : _0xa07dxb7 } }, { key: "getExistingFallback", value: function _0xa07dxb8() { var _0xa07dxb9 = function _0xa07dxb9(_0xa07dxba) { for (var _0xa07dxbb = _0xa07dxba, _0xa07dxbc = true, _0xa07dxbd = 0, _0xa07dxbb = _0xa07dxbc ? _0xa07dxbb : _0xa07dxbb[Symbol.iterator](); ;) { var _0xa07dxbe; if (_0xa07dxbc) { if (_0xa07dxbd >= _0xa07dxbb.length) { break }; _0xa07dxbe = _0xa07dxbb[_0xa07dxbd++] } else { _0xa07dxbd = _0xa07dxbb.next(); if (_0xa07dxbd.done) { break }; _0xa07dxbe = _0xa07dxbd.value }; var _0xa07dx88 = _0xa07dxbe; if (/(^| )fallback($| )/.test(_0xa07dx88.className)) { return _0xa07dx88 } } }; var _0xa07dxbf = ["div", "form"]; for (var _0xa07dxc0 = 0; _0xa07dxc0 < _0xa07dxbf.length; _0xa07dxc0++) { var _0xa07dxc1 = _0xa07dxbf[_0xa07dxc0]; var _0xa07dx2e; if (_0xa07dx2e = _0xa07dxb9(this.element.getElementsByTagName(_0xa07dxc1))) { return _0xa07dx2e } } } }, { key: "setupEventListeners", value: function _0xa07dxc2() { return this.listeners.map(function (_0xa07dxc3) { return function () { var _0xa07dxc4 = []; for (var _0xa07dx14 in _0xa07dxc3.events) { var _0xa07dxc5 = _0xa07dxc3.events[_0xa07dx14]; _0xa07dxc4.push(_0xa07dxc3.element.addEventListener(_0xa07dx14, _0xa07dxc5, false)) }; return _0xa07dxc4 }() }) } }, { key: "removeEventListeners", value: function _0xa07dxc6() { return this.listeners.map(function (_0xa07dxc3) { return function () { var _0xa07dxc4 = []; for (var _0xa07dx14 in _0xa07dxc3.events) { var _0xa07dxc5 = _0xa07dxc3.events[_0xa07dx14]; _0xa07dxc4.push(_0xa07dxc3.element.removeEventListener(_0xa07dx14, _0xa07dxc5, false)) }; return _0xa07dxc4 }() }) } }, { key: "disable", value: function _0xa07dxc7() { var _0xa07dxc8 = this; this.clickableElements.forEach(function (_0xa07dxc9) { return _0xa07dxc9.classList.remove("dz-clickable") }); this.removeEventListeners(); this.disabled = true; return this.files.map(function (_0xa07dx2b) { return _0xa07dxc8.cancelUpload(_0xa07dx2b) }) } }, { key: "enable", value: function _0xa07dxca() { delete this.disabled; this.clickableElements.forEach(function (_0xa07dxc9) { return _0xa07dxc9.classList.add("dz-clickable") }); return this.setupEventListeners() } }, { key: "filesize", value: function _0xa07dxcb(_0xa07dxcc) { var _0xa07dxcd = 0; var _0xa07dxce = "b"; if (_0xa07dxcc > 0) { var _0xa07dxcf = ["tb", "gb", "mb", "kb", "b"]; for (var _0xa07dx5 = 0; _0xa07dx5 < _0xa07dxcf.length; _0xa07dx5++) { var _0xa07dxd0 = _0xa07dxcf[_0xa07dx5]; var _0xa07dxd1 = Math.pow(this.options.filesizeBase, 4 - _0xa07dx5) / 10; if (_0xa07dxcc >= _0xa07dxd1) { _0xa07dxcd = _0xa07dxcc / Math.pow(this.options.filesizeBase, 4 - _0xa07dx5); _0xa07dxce = _0xa07dxd0; break } }; _0xa07dxcd = Math.round(10 * _0xa07dxcd) / 10 }; return "<strong>" + _0xa07dxcd + "</strong> " + this.options.dictFileSizeUnits[_0xa07dxce] } }, { key: "_updateMaxFilesReachedClass", value: function _0xa07dxd2() { if (this.options.maxFiles != null && this.getAcceptedFiles().length >= this.options.maxFiles) { if (this.getAcceptedFiles().length === this.options.maxFiles) { this.emit("maxfilesreached", this.files) }; return this.element.classList.add("dz-max-files-reached") } else { return this.element.classList.remove("dz-max-files-reached") } } }, { key: "drop", value: function _0xa07dx3e(_0xa07dx3f) { if (!_0xa07dx3f.dataTransfer) { return }; this.emit("drop", _0xa07dx3f); var _0xa07dx27 = []; for (var _0xa07dx5 = 0; _0xa07dx5 < _0xa07dx3f.dataTransfer.files.length; _0xa07dx5++) { _0xa07dx27[_0xa07dx5] = _0xa07dx3f.dataTransfer.files[_0xa07dx5] }; this.emit("addedfiles", _0xa07dx27); if (_0xa07dx27.length) { var _0xa07dxd3 = _0xa07dx3f.dataTransfer.items; if (_0xa07dxd3 && _0xa07dxd3.length && _0xa07dxd3[0].webkitGetAsEntry != null) { this._addFilesFromItems(_0xa07dxd3) } else { this.handleFiles(_0xa07dx27) } } } }, { key: "paste", value: function _0xa07dx45(_0xa07dx3f) { if (__guard__(_0xa07dx3f != null ? _0xa07dx3f.clipboardData : undefined, function (_0xa07dxd4) { return _0xa07dxd4.items }) == null) { return }; this.emit("paste", _0xa07dx3f); var _0xa07dxd3 = _0xa07dx3f.clipboardData.items; if (_0xa07dxd3.length) { return this._addFilesFromItems(_0xa07dxd3) } } }, { key: "handleFiles", value: function _0xa07dxd5(_0xa07dx27) { for (var _0xa07dxd6 = _0xa07dx27, _0xa07dxd7 = true, _0xa07dxd8 = 0, _0xa07dxd6 = _0xa07dxd7 ? _0xa07dxd6 : _0xa07dxd6[Symbol.iterator](); ;) { var _0xa07dxd9; if (_0xa07dxd7) { if (_0xa07dxd8 >= _0xa07dxd6.length) { break }; _0xa07dxd9 = _0xa07dxd6[_0xa07dxd8++] } else { _0xa07dxd8 = _0xa07dxd6.next(); if (_0xa07dxd8.done) { break }; _0xa07dxd9 = _0xa07dxd8.value }; var _0xa07dx2b = _0xa07dxd9; this.addFile(_0xa07dx2b) } } }, { key: "_addFilesFromItems", value: function _0xa07dxda(_0xa07dxd3) { var _0xa07dxdb = this; return function () { var _0xa07dxc4 = []; for (var _0xa07dxdc = _0xa07dxd3, _0xa07dxdd = true, _0xa07dxde = 0, _0xa07dxdc = _0xa07dxdd ? _0xa07dxdc : _0xa07dxdc[Symbol.iterator](); ;) { var _0xa07dxdf; if (_0xa07dxdd) { if (_0xa07dxde >= _0xa07dxdc.length) { break }; _0xa07dxdf = _0xa07dxdc[_0xa07dxde++] } else { _0xa07dxde = _0xa07dxdc.next(); if (_0xa07dxde.done) { break }; _0xa07dxdf = _0xa07dxde.value }; var _0xa07dxe0 = _0xa07dxdf; var _0xa07dxe1; if (_0xa07dxe0.webkitGetAsEntry != null && (_0xa07dxe1 = _0xa07dxe0.webkitGetAsEntry())) { if (_0xa07dxe1.isFile) { _0xa07dxc4.push(_0xa07dxdb.addFile(_0xa07dxe0.getAsFile())) } else { if (_0xa07dxe1.isDirectory) { _0xa07dxc4.push(_0xa07dxdb._addFilesFromDirectory(_0xa07dxe1, _0xa07dxe1.name)) } else { _0xa07dxc4.push(undefined) } } } else { if (_0xa07dxe0.getAsFile != null) { if (_0xa07dxe0.kind == null || _0xa07dxe0.kind === "file") { _0xa07dxc4.push(_0xa07dxdb.addFile(_0xa07dxe0.getAsFile())) } else { _0xa07dxc4.push(undefined) } } else { _0xa07dxc4.push(undefined) } } }; return _0xa07dxc4 }() } }, { key: "_addFilesFromDirectory", value: function _0xa07dxe2(_0xa07dxe3, _0xa07dxe4) { var _0xa07dxe5 = this; var _0xa07dxe6 = _0xa07dxe3.createReader(); var _0xa07dxe7 = function _0xa07dxe7(_0xa07dx60) { return __guardMethod__(console, "log", function (_0xa07dxe8) { return _0xa07dxe8.log(_0xa07dx60) }) }; var _0xa07dxe9 = function _0xa07dxe9() { return _0xa07dxe6.readEntries(function (_0xa07dxea) { if (_0xa07dxea.length > 0) { for (var _0xa07dxeb = _0xa07dxea, _0xa07dxec = true, _0xa07dxed = 0, _0xa07dxeb = _0xa07dxec ? _0xa07dxeb : _0xa07dxeb[Symbol.iterator](); ;) { var _0xa07dxee; if (_0xa07dxec) { if (_0xa07dxed >= _0xa07dxeb.length) { break }; _0xa07dxee = _0xa07dxeb[_0xa07dxed++] } else { _0xa07dxed = _0xa07dxeb.next(); if (_0xa07dxed.done) { break }; _0xa07dxee = _0xa07dxed.value }; var _0xa07dxe1 = _0xa07dxee; if (_0xa07dxe1.isFile) { _0xa07dxe1.file(function (_0xa07dx2b) { if (_0xa07dxe5.options.ignoreHiddenFiles && _0xa07dx2b.name.substring(0, 1) === ".") { return }; _0xa07dx2b.fullPath = _0xa07dxe4 + "/" + _0xa07dx2b.name; return _0xa07dxe5.addFile(_0xa07dx2b) }) } else { if (_0xa07dxe1.isDirectory) { _0xa07dxe5._addFilesFromDirectory(_0xa07dxe1, _0xa07dxe4 + "/" + _0xa07dxe1.name) } } }; _0xa07dxe9() }; return null }, _0xa07dxe7) }; return _0xa07dxe9() } }, { key: "accept", value: function _0xa07dx2a(_0xa07dx2b, _0xa07dx2c) { if (this.options.maxFilesize && _0xa07dx2b.size > this.options.maxFilesize * 1024 * 1024) { return _0xa07dx2c(this.options.dictFileTooBig.replace("{{filesize}}", Math.round(_0xa07dx2b.size / 1024 / 10.24) / 100).replace("{{maxFilesize}}", this.options.maxFilesize)) } else { if (!Dropzone.isValidFile(_0xa07dx2b, this.options.acceptedFiles)) { return _0xa07dx2c(this.options.dictInvalidFileType) } else { if (this.options.maxFiles != null && this.getAcceptedFiles().length >= this.options.maxFiles) { _0xa07dx2c(this.options.dictMaxFilesExceeded.replace("{{maxFiles}}", this.options.maxFiles)); return this.emit("maxfilesexceeded", _0xa07dx2b) } else { return this.options.accept.call(this, _0xa07dx2b, _0xa07dx2c) } } } } }, { key: "addFile", value: function _0xa07dxef(_0xa07dx2b) { var _0xa07dxf0 = this; _0xa07dx2b.upload = { uuid: Dropzone.uuidv4(), progress: 0, total: _0xa07dx2b.size, bytesSent: 0, filename: this._renameFile(_0xa07dx2b), chunked: this.options.chunking && (this.options.forceChunking || _0xa07dx2b.size > this.options.chunkSize), totalChunkCount: Math.ceil(_0xa07dx2b.size / this.options.chunkSize) }; this.files.push(_0xa07dx2b); _0xa07dx2b.status = Dropzone.ADDED; this.emit("addedfile", _0xa07dx2b); this._enqueueThumbnail(_0xa07dx2b); return this.accept(_0xa07dx2b, function (_0xa07dx60) { if (_0xa07dx60) { _0xa07dx2b.accepted = false; _0xa07dxf0._errorProcessing([_0xa07dx2b], _0xa07dx60) } else { _0xa07dx2b.accepted = true; if (_0xa07dxf0.options.autoQueue) { _0xa07dxf0.enqueueFile(_0xa07dx2b) } }; return _0xa07dxf0._updateMaxFilesReachedClass() }) } }, { key: "enqueueFiles", value: function _0xa07dxf1(_0xa07dx27) { for (var _0xa07dxf2 = _0xa07dx27, _0xa07dxf3 = true, _0xa07dxf4 = 0, _0xa07dxf2 = _0xa07dxf3 ? _0xa07dxf2 : _0xa07dxf2[Symbol.iterator](); ;) { var _0xa07dxf5; if (_0xa07dxf3) { if (_0xa07dxf4 >= _0xa07dxf2.length) { break }; _0xa07dxf5 = _0xa07dxf2[_0xa07dxf4++] } else { _0xa07dxf4 = _0xa07dxf2.next(); if (_0xa07dxf4.done) { break }; _0xa07dxf5 = _0xa07dxf4.value }; var _0xa07dx2b = _0xa07dxf5; this.enqueueFile(_0xa07dx2b) }; return null } }, { key: "enqueueFile", value: function _0xa07dxf6(_0xa07dx2b) { var _0xa07dxf7 = this; if (_0xa07dx2b.status === Dropzone.ADDED && _0xa07dx2b.accepted === true) { _0xa07dx2b.status = Dropzone.QUEUED; if (this.options.autoProcessQueue) { return setTimeout(function () { return _0xa07dxf7.processQueue() }, 0) } } else { throw new Error("This file can't be queued because it has already been processed or was rejected.") } } }, { key: "_enqueueThumbnail", value: function _0xa07dxf8(_0xa07dx2b) { var _0xa07dxf9 = this; if (this.options.createImageThumbnails && _0xa07dx2b.type.match(/image.*/) && _0xa07dx2b.size <= this.options.maxThumbnailFilesize * 1024 * 1024) { this._thumbnailQueue.push(_0xa07dx2b); return setTimeout(function () { return _0xa07dxf9._processThumbnailQueue() }, 0) } } }, { key: "_processThumbnailQueue", value: function _0xa07dxfa() { var _0xa07dxfb = this; if (this._processingThumbnail || this._thumbnailQueue.length === 0) { return }; this._processingThumbnail = true; var _0xa07dx2b = this._thumbnailQueue.shift(); return this.createThumbnail(_0xa07dx2b, this.options.thumbnailWidth, this.options.thumbnailHeight, this.options.thumbnailMethod, true, function (_0xa07dx5a) { _0xa07dxfb.emit("thumbnail", _0xa07dx2b, _0xa07dx5a); _0xa07dxfb._processingThumbnail = false; return _0xa07dxfb._processThumbnailQueue() }) } }, { key: "removeFile", value: function _0xa07dxfc(_0xa07dx2b) { if (_0xa07dx2b.status === Dropzone.UPLOADING) { this.cancelUpload(_0xa07dx2b) }; this.files = without(this.files, _0xa07dx2b); this.emit("removedfile", _0xa07dx2b); if (this.files.length === 0) { return this.emit("reset") } } }, { key: "removeFileNoSql", value: function _0xa07dxfc(_0xa07dx2b) { if (_0xa07dx2b.status === Dropzone.UPLOADING) { this.cancelUpload(_0xa07dx2b) }; this.files = without(this.files, _0xa07dx2b); this.emit("removedfileNoSql", _0xa07dx2b); if (this.files.length === 0) { return this.emit("reset") } } }, { key: "removeAllFiles", value: function _0xa07dxfd(_0xa07dxfe) { if (_0xa07dxfe == null) { _0xa07dxfe = false }; for (var _0xa07dxff = this.files.slice(), _0xa07dx100 = true, _0xa07dx101 = 0, _0xa07dxff = _0xa07dx100 ? _0xa07dxff : _0xa07dxff[Symbol.iterator](); ;) { var _0xa07dx102; if (_0xa07dx100) { if (_0xa07dx101 >= _0xa07dxff.length) { break }; _0xa07dx102 = _0xa07dxff[_0xa07dx101++] } else { _0xa07dx101 = _0xa07dxff.next(); if (_0xa07dx101.done) { break }; _0xa07dx102 = _0xa07dx101.value }; var _0xa07dx2b = _0xa07dx102; if (_0xa07dx2b.status !== Dropzone.UPLOADING || _0xa07dxfe) { this.removeFile(_0xa07dx2b) } }; return null } }, { key: "resizeImage", value: function _0xa07dx103(_0xa07dx2b, _0xa07dx37, _0xa07dx38, _0xa07dx39, _0xa07dx1f) { var _0xa07dx104 = this; return this.createThumbnail(_0xa07dx2b, _0xa07dx37, _0xa07dx38, _0xa07dx39, false, function (_0xa07dx5a, _0xa07dx105) { if (_0xa07dx105 == null) { return _0xa07dx1f(_0xa07dx2b) } else { var _0xa07dx106 = _0xa07dx104.options.resizeMimeType; if (_0xa07dx106 == null) { _0xa07dx106 = _0xa07dx2b.type }; var _0xa07dx107 = _0xa07dx105.toDataURL(_0xa07dx106, _0xa07dx104.options.resizeQuality); if (_0xa07dx106 === "image/jpeg" || _0xa07dx106 === "image/jpg") { _0xa07dx107 = ExifRestore.restore(_0xa07dx2b.dataURL, _0xa07dx107) }; return _0xa07dx1f(Dropzone.dataURItoBlob(_0xa07dx107)) } }) } }, { key: "createThumbnail", value: function _0xa07dx108(_0xa07dx2b, _0xa07dx37, _0xa07dx38, _0xa07dx39, _0xa07dx109, _0xa07dx1f) { var _0xa07dx10a = this; var _0xa07dx10b = new FileReader(); _0xa07dx10b.onload = function () { _0xa07dx2b.dataURL = _0xa07dx10b.result; if (_0xa07dx2b.type === "image/svg+xml") { if (_0xa07dx1f != null) { _0xa07dx1f(_0xa07dx10b.result) }; return }; return _0xa07dx10a.createThumbnailFromUrl(_0xa07dx2b, _0xa07dx37, _0xa07dx38, _0xa07dx39, _0xa07dx109, _0xa07dx1f) }; return _0xa07dx10b.readAsDataURL(_0xa07dx2b) } }, { key: "createThumbnailFromUrl", value: function _0xa07dx10c(_0xa07dx2b, _0xa07dx37, _0xa07dx38, _0xa07dx39, _0xa07dx109, _0xa07dx1f, _0xa07dx10d) { var _0xa07dx10e = this; var _0xa07dx10f = document.createElement("img"); if (_0xa07dx10d) { _0xa07dx10f.crossOrigin = _0xa07dx10d }; _0xa07dx10f.onload = function () { var _0xa07dx110 = function _0xa07dx110(_0xa07dx1f) { return _0xa07dx1f(1) }; if (typeof EXIF !== "undefined" && EXIF !== null && _0xa07dx109) { _0xa07dx110 = function _0xa07dx110(_0xa07dx1f) { return EXIF.getData(_0xa07dx10f, function () { return _0xa07dx1f(EXIF.getTag(this, "Orientation")) }) } }; return _0xa07dx110(function (_0xa07dx111) { _0xa07dx2b.width = _0xa07dx10f.width; _0xa07dx2b.height = _0xa07dx10f.height; var _0xa07dx112 = _0xa07dx10e.options.resize.call(_0xa07dx10e, _0xa07dx2b, _0xa07dx37, _0xa07dx38, _0xa07dx39); var _0xa07dx105 = document.createElement("canvas"); var _0xa07dx113 = _0xa07dx105.getContext("2d"); _0xa07dx105.width = _0xa07dx112.trgWidth; _0xa07dx105.height = _0xa07dx112.trgHeight; if (_0xa07dx111 > 4) { _0xa07dx105.width = _0xa07dx112.trgHeight; _0xa07dx105.height = _0xa07dx112.trgWidth }; switch (_0xa07dx111) { case 2: _0xa07dx113.translate(_0xa07dx105.width, 0); _0xa07dx113.scale(-1, 1); break; case 3: _0xa07dx113.translate(_0xa07dx105.width, _0xa07dx105.height); _0xa07dx113.rotate(Math.PI); break; case 4: _0xa07dx113.translate(0, _0xa07dx105.height); _0xa07dx113.scale(1, -1); break; case 5: _0xa07dx113.rotate(0.5 * Math.PI); _0xa07dx113.scale(1, -1); break; case 6: _0xa07dx113.rotate(0.5 * Math.PI); _0xa07dx113.translate(0, -_0xa07dx105.height); break; case 7: _0xa07dx113.rotate(0.5 * Math.PI); _0xa07dx113.translate(_0xa07dx105.width, -_0xa07dx105.height); _0xa07dx113.scale(-1, 1); break; case 8: _0xa07dx113.rotate(-0.5 * Math.PI); _0xa07dx113.translate(-_0xa07dx105.width, 0); break }; drawImageIOSFix(_0xa07dx113, _0xa07dx10f, _0xa07dx112.srcX != null ? _0xa07dx112.srcX : 0, _0xa07dx112.srcY != null ? _0xa07dx112.srcY : 0, _0xa07dx112.srcWidth, _0xa07dx112.srcHeight, _0xa07dx112.trgX != null ? _0xa07dx112.trgX : 0, _0xa07dx112.trgY != null ? _0xa07dx112.trgY : 0, _0xa07dx112.trgWidth, _0xa07dx112.trgHeight); var _0xa07dx59 = _0xa07dx105.toDataURL("image/png"); if (_0xa07dx1f != null) { return _0xa07dx1f(_0xa07dx59, _0xa07dx105) } }) }; if (_0xa07dx1f != null) { _0xa07dx10f.onerror = _0xa07dx1f }; return _0xa07dx10f.src = _0xa07dx2b.dataURL } }, { key: "processQueue", value: function _0xa07dx114() { var _0xa07dx115 = this.options.parallelUploads; var _0xa07dx116 = this.getUploadingFiles().length; var _0xa07dx5 = _0xa07dx116; if (_0xa07dx116 >= _0xa07dx115) { return }; var _0xa07dx117 = this.getQueuedFiles(); if (!(_0xa07dx117.length > 0)) { return }; if (this.options.uploadMultiple) { return this.processFiles(_0xa07dx117.slice(0, _0xa07dx115 - _0xa07dx116)) } else { while (_0xa07dx5 < _0xa07dx115) { if (!_0xa07dx117.length) { return }; this.processFile(_0xa07dx117.shift()); _0xa07dx5++ } } } }, { key: "processFile", value: function _0xa07dx118(_0xa07dx2b) { return this.processFiles([_0xa07dx2b]) } }, { key: "processFiles", value: function _0xa07dx119(_0xa07dx27) { for (var _0xa07dx11a = _0xa07dx27, _0xa07dx11b = true, _0xa07dx11c = 0, _0xa07dx11a = _0xa07dx11b ? _0xa07dx11a : _0xa07dx11a[Symbol.iterator](); ;) { var _0xa07dx11d; if (_0xa07dx11b) { if (_0xa07dx11c >= _0xa07dx11a.length) { break }; _0xa07dx11d = _0xa07dx11a[_0xa07dx11c++] } else { _0xa07dx11c = _0xa07dx11a.next(); if (_0xa07dx11c.done) { break }; _0xa07dx11d = _0xa07dx11c.value }; var _0xa07dx2b = _0xa07dx11d; _0xa07dx2b.processing = true; _0xa07dx2b.status = Dropzone.UPLOADING; this.emit("processing", _0xa07dx2b) }; if (this.options.uploadMultiple) { this.emit("processingmultiple", _0xa07dx27) }; return this.uploadFiles(_0xa07dx27) } }, { key: "_getFilesWithXhr", value: function _0xa07dx11e(_0xa07dx28) { var _0xa07dx27 = void (0); return _0xa07dx27 = this.files.filter(function (_0xa07dx2b) { return _0xa07dx2b.xhr === _0xa07dx28 }).map(function (_0xa07dx2b) { return _0xa07dx2b }) } }, { key: "cancelUpload", value: function _0xa07dx11f(_0xa07dx2b) { if (_0xa07dx2b.status === Dropzone.UPLOADING) { var _0xa07dx120 = this._getFilesWithXhr(_0xa07dx2b.xhr); for (var _0xa07dx121 = _0xa07dx120, _0xa07dx122 = true, _0xa07dx123 = 0, _0xa07dx121 = _0xa07dx122 ? _0xa07dx121 : _0xa07dx121[Symbol.iterator](); ;) { var _0xa07dx124; if (_0xa07dx122) { if (_0xa07dx123 >= _0xa07dx121.length) { break }; _0xa07dx124 = _0xa07dx121[_0xa07dx123++] } else { _0xa07dx123 = _0xa07dx121.next(); if (_0xa07dx123.done) { break }; _0xa07dx124 = _0xa07dx123.value }; var _0xa07dx125 = _0xa07dx124; _0xa07dx125.status = Dropzone.CANCELED }; if (typeof _0xa07dx2b.xhr !== "undefined") { _0xa07dx2b.xhr.abort() }; for (var _0xa07dx126 = _0xa07dx120, _0xa07dx127 = true, _0xa07dx128 = 0, _0xa07dx126 = _0xa07dx127 ? _0xa07dx126 : _0xa07dx126[Symbol.iterator](); ;) { var _0xa07dx129; if (_0xa07dx127) { if (_0xa07dx128 >= _0xa07dx126.length) { break }; _0xa07dx129 = _0xa07dx126[_0xa07dx128++] } else { _0xa07dx128 = _0xa07dx126.next(); if (_0xa07dx128.done) { break }; _0xa07dx129 = _0xa07dx128.value }; var _0xa07dx12a = _0xa07dx129; this.emit("canceled", _0xa07dx12a) }; if (this.options.uploadMultiple) { this.emit("canceledmultiple", _0xa07dx120) } } else { if (_0xa07dx2b.status === Dropzone.ADDED || _0xa07dx2b.status === Dropzone.QUEUED) { _0xa07dx2b.status = Dropzone.CANCELED; this.emit("canceled", _0xa07dx2b); if (this.options.uploadMultiple) { this.emit("canceledmultiple", [_0xa07dx2b]) } } }; if (this.options.autoProcessQueue) { return this.processQueue() } } }, { key: "resolveOption", value: function _0xa07dx12b(_0xa07dx12c) { if (typeof _0xa07dx12c === "function") { for (var _0xa07dx12d = arguments.length, _0xa07dx19 = Array(_0xa07dx12d > 1 ? _0xa07dx12d - 1 : 0), _0xa07dx12e = 1; _0xa07dx12e < _0xa07dx12d; _0xa07dx12e++) { _0xa07dx19[_0xa07dx12e - 1] = arguments[_0xa07dx12e] }; return _0xa07dx12c.apply(this, _0xa07dx19) }; return _0xa07dx12c } }, { key: "uploadFile", value: function _0xa07dx12f(_0xa07dx2b) { return this.uploadFiles([_0xa07dx2b]) } }, { key: "uploadFiles", value: function _0xa07dx130(_0xa07dx27) { var _0xa07dx131 = this; this._transformFiles(_0xa07dx27, function (_0xa07dx132) { if (_0xa07dx27[0].upload.chunked) { var _0xa07dx2b = _0xa07dx27[0]; var _0xa07dx133 = _0xa07dx132[0]; var _0xa07dx134 = 0; _0xa07dx2b.upload.chunks = []; var _0xa07dx135 = function _0xa07dx135() { var _0xa07dx136 = 0; while (_0xa07dx2b.upload.chunks[_0xa07dx136] !== undefined) { _0xa07dx136++ }; if (_0xa07dx136 >= _0xa07dx2b.upload.totalChunkCount) { return }; _0xa07dx134++; var _0xa07dx137 = _0xa07dx136 * _0xa07dx131.options.chunkSize; var _0xa07dx138 = Math.min(_0xa07dx137 + _0xa07dx131.options.chunkSize, _0xa07dx2b.size); var _0xa07dx139 = { name: _0xa07dx131._getParamName(0), data: _0xa07dx133.webkitSlice ? _0xa07dx133.webkitSlice(_0xa07dx137, _0xa07dx138) : _0xa07dx133.slice(_0xa07dx137, _0xa07dx138), filename: _0xa07dx2b.upload.filename, chunkIndex: _0xa07dx136 }; _0xa07dx2b.upload.chunks[_0xa07dx136] = { file: _0xa07dx2b, index: _0xa07dx136, dataBlock: _0xa07dx139, status: Dropzone.UPLOADING, progress: 0, retries: 0 }; _0xa07dx131._uploadData(_0xa07dx27, [_0xa07dx139]) }; _0xa07dx2b.upload.finishedChunkUpload = function (_0xa07dx29) { var _0xa07dx13a = true; _0xa07dx29.status = Dropzone.SUCCESS; _0xa07dx29.dataBlock = null; for (var _0xa07dx5 = 0; _0xa07dx5 < _0xa07dx2b.upload.totalChunkCount; _0xa07dx5++) { if (_0xa07dx2b.upload.chunks[_0xa07dx5] === undefined) { return _0xa07dx135() }; if (_0xa07dx2b.upload.chunks[_0xa07dx5].status !== Dropzone.SUCCESS) { _0xa07dx13a = false } }; if (_0xa07dx13a) { _0xa07dx131.options.chunksUploaded(_0xa07dx2b, function () { _0xa07dx131._finished(_0xa07dx27, "", null) }) } }; if (_0xa07dx131.options.parallelChunkUploads) { for (var _0xa07dx5 = 0; _0xa07dx5 < _0xa07dx2b.upload.totalChunkCount; _0xa07dx5++) { _0xa07dx135() } } else { _0xa07dx135() } } else { var _0xa07dx13b = []; for (var _0xa07dx13c = 0; _0xa07dx13c < _0xa07dx27.length; _0xa07dx13c++) { _0xa07dx13b[_0xa07dx13c] = { name: _0xa07dx131._getParamName(_0xa07dx13c), data: _0xa07dx132[_0xa07dx13c], filename: _0xa07dx27[_0xa07dx13c].upload.filename } }; _0xa07dx131._uploadData(_0xa07dx27, _0xa07dx13b) } }) } }, { key: "_getChunk", value: function _0xa07dx13d(_0xa07dx2b, _0xa07dx28) { for (var _0xa07dx5 = 0; _0xa07dx5 < _0xa07dx2b.upload.totalChunkCount; _0xa07dx5++) { if (_0xa07dx2b.upload.chunks[_0xa07dx5] !== undefined && _0xa07dx2b.upload.chunks[_0xa07dx5].xhr === _0xa07dx28) { return _0xa07dx2b.upload.chunks[_0xa07dx5] } } } }, { key: "_uploadData", value: function _0xa07dx13e(_0xa07dx27, _0xa07dx13b) { var _0xa07dx13f = this; var _0xa07dx28 = new XMLHttpRequest(); for (var _0xa07dx140 = _0xa07dx27, _0xa07dx141 = true, _0xa07dx142 = 0, _0xa07dx140 = _0xa07dx141 ? _0xa07dx140 : _0xa07dx140[Symbol.iterator](); ;) { var _0xa07dx143; if (_0xa07dx141) { if (_0xa07dx142 >= _0xa07dx140.length) { break }; _0xa07dx143 = _0xa07dx140[_0xa07dx142++] } else { _0xa07dx142 = _0xa07dx140.next(); if (_0xa07dx142.done) { break }; _0xa07dx143 = _0xa07dx142.value }; var _0xa07dx2b = _0xa07dx143; _0xa07dx2b.xhr = _0xa07dx28 }; if (_0xa07dx27[0].upload.chunked) { _0xa07dx27[0].upload.chunks[_0xa07dx13b[0].chunkIndex].xhr = _0xa07dx28 }; var _0xa07dx144 = this.resolveOption(this.options.method, _0xa07dx27); var _0xa07dx145 = this.resolveOption(this.options.url, _0xa07dx27); _0xa07dx28.open(_0xa07dx144, _0xa07dx145, true); _0xa07dx28.timeout = this.resolveOption(this.options.timeout, _0xa07dx27); _0xa07dx28.withCredentials = !!this.options.withCredentials; _0xa07dx28.onload = function (_0xa07dx3f) { _0xa07dx13f._finishedUploading(_0xa07dx27, _0xa07dx28, _0xa07dx3f) }; _0xa07dx28.onerror = function () { _0xa07dx13f._handleUploadError(_0xa07dx27, _0xa07dx28) }; var _0xa07dx146 = _0xa07dx28.upload != null ? _0xa07dx28.upload : _0xa07dx28; _0xa07dx146.onprogress = function (_0xa07dx3f) { return _0xa07dx13f._updateFilesUploadProgress(_0xa07dx27, _0xa07dx28, _0xa07dx3f) }; var _0xa07dx147 = { "\x41\x63\x63\x65\x70\x74": "application/json", "\x43\x61\x63\x68\x65\x2D\x43\x6F\x6E\x74\x72\x6F\x6C": "no-cache", "\x58\x2D\x52\x65\x71\x75\x65\x73\x74\x65\x64\x2D\x57\x69\x74\x68": "XMLHttpRequest" }; if (this.options.headers) { Dropzone.extend(_0xa07dx147, this.options.headers) }; for (var _0xa07dx148 in _0xa07dx147) { var _0xa07dx149 = _0xa07dx147[_0xa07dx148]; if (_0xa07dx149) { _0xa07dx28.setRequestHeader(_0xa07dx148, _0xa07dx149) } }; var _0xa07dx14a = new FormData(); if (this.options.params) { var _0xa07dx14b = this.options.params; if (typeof _0xa07dx14b === "function") { _0xa07dx14b = _0xa07dx14b.call(this, _0xa07dx27, _0xa07dx28, _0xa07dx27[0].upload.chunked ? this._getChunk(_0xa07dx27[0], _0xa07dx28) : null) }; for (var _0xa07dx86 in _0xa07dx14b) { var _0xa07dx14c = _0xa07dx14b[_0xa07dx86]; _0xa07dx14a.append(_0xa07dx86, _0xa07dx14c) } }; for (var _0xa07dx14d = _0xa07dx27, _0xa07dx14e = true, _0xa07dx14f = 0, _0xa07dx14d = _0xa07dx14e ? _0xa07dx14d : _0xa07dx14d[Symbol.iterator](); ;) { var _0xa07dx150; if (_0xa07dx14e) { if (_0xa07dx14f >= _0xa07dx14d.length) { break }; _0xa07dx150 = _0xa07dx14d[_0xa07dx14f++] } else { _0xa07dx14f = _0xa07dx14d.next(); if (_0xa07dx14f.done) { break }; _0xa07dx150 = _0xa07dx14f.value }; var _0xa07dx151 = _0xa07dx150; this.emit("sending", _0xa07dx151, _0xa07dx28, _0xa07dx14a) }; if (this.options.uploadMultiple) { this.emit("sendingmultiple", _0xa07dx27, _0xa07dx28, _0xa07dx14a) }; this._addFormElementData(_0xa07dx14a); for (var _0xa07dx5 = 0; _0xa07dx5 < _0xa07dx13b.length; _0xa07dx5++) { var _0xa07dx139 = _0xa07dx13b[_0xa07dx5]; _0xa07dx14a.append(_0xa07dx139.name, _0xa07dx139.data, _0xa07dx139.filename) }; this.submitRequest(_0xa07dx28, _0xa07dx14a, _0xa07dx27) } }, { key: "_transformFiles", value: function _0xa07dx152(_0xa07dx27, _0xa07dx2c) { var _0xa07dx153 = this; var _0xa07dx132 = []; var _0xa07dx154 = 0; var _0xa07dx155 = function _0xa07dx155(_0xa07dx5) { _0xa07dx153.options.transformFile.call(_0xa07dx153, _0xa07dx27[_0xa07dx5], function (_0xa07dx133) { _0xa07dx132[_0xa07dx5] = _0xa07dx133; if (++_0xa07dx154 === _0xa07dx27.length) { _0xa07dx2c(_0xa07dx132) } }) }; for (var _0xa07dx5 = 0; _0xa07dx5 < _0xa07dx27.length; _0xa07dx5++) { _0xa07dx155(_0xa07dx5) } } }, { key: "_addFormElementData", value: function _0xa07dx156(_0xa07dx14a) { if (this.element.tagName === "FORM") { for (var _0xa07dx157 = this.element.querySelectorAll("input, textarea, select, button"), _0xa07dx158 = true, _0xa07dx159 = 0, _0xa07dx157 = _0xa07dx158 ? _0xa07dx157 : _0xa07dx157[Symbol.iterator](); ;) { var _0xa07dx15a; if (_0xa07dx158) { if (_0xa07dx159 >= _0xa07dx157.length) { break }; _0xa07dx15a = _0xa07dx157[_0xa07dx159++] } else { _0xa07dx159 = _0xa07dx157.next(); if (_0xa07dx159.done) { break }; _0xa07dx15a = _0xa07dx159.value }; var _0xa07dx15b = _0xa07dx15a; var _0xa07dx15c = _0xa07dx15b.getAttribute("name"); var _0xa07dx15d = _0xa07dx15b.getAttribute("type"); if (_0xa07dx15d) { _0xa07dx15d = _0xa07dx15d.toLowerCase() }; if (typeof _0xa07dx15c === "undefined" || _0xa07dx15c === null) { continue }; if (_0xa07dx15b.tagName === "SELECT" && _0xa07dx15b.hasAttribute("multiple")) { for (var _0xa07dx15e = _0xa07dx15b.options, _0xa07dx15f = true, _0xa07dx160 = 0, _0xa07dx15e = _0xa07dx15f ? _0xa07dx15e : _0xa07dx15e[Symbol.iterator](); ;) { var _0xa07dx161; if (_0xa07dx15f) { if (_0xa07dx160 >= _0xa07dx15e.length) { break }; _0xa07dx161 = _0xa07dx15e[_0xa07dx160++] } else { _0xa07dx160 = _0xa07dx15e.next(); if (_0xa07dx160.done) { break }; _0xa07dx161 = _0xa07dx160.value }; var _0xa07dx12c = _0xa07dx161; if (_0xa07dx12c.selected) { _0xa07dx14a.append(_0xa07dx15c, _0xa07dx12c.value) } } } else { if (!_0xa07dx15d || _0xa07dx15d !== "checkbox" && _0xa07dx15d !== "radio" || _0xa07dx15b.checked) { _0xa07dx14a.append(_0xa07dx15c, _0xa07dx15b.value) } } } } } }, { key: "_updateFilesUploadProgress", value: function _0xa07dx162(_0xa07dx27, _0xa07dx28, _0xa07dx3f) { var _0xa07dx6a = void (0); if (typeof _0xa07dx3f !== "undefined") { _0xa07dx6a = 100 * _0xa07dx3f.loaded / _0xa07dx3f.total; if (_0xa07dx27[0].upload.chunked) { var _0xa07dx2b = _0xa07dx27[0]; var _0xa07dx29 = this._getChunk(_0xa07dx2b, _0xa07dx28); _0xa07dx29.progress = _0xa07dx6a; _0xa07dx29.total = _0xa07dx3f.total; _0xa07dx29.bytesSent = _0xa07dx3f.loaded; var _0xa07dx163 = 0, _0xa07dx164 = void (0), _0xa07dx165 = void (0); _0xa07dx2b.upload.progress = 0; _0xa07dx2b.upload.total = 0; _0xa07dx2b.upload.bytesSent = 0; for (var _0xa07dx5 = 0; _0xa07dx5 < _0xa07dx2b.upload.totalChunkCount; _0xa07dx5++) { if (_0xa07dx2b.upload.chunks[_0xa07dx5] !== undefined && _0xa07dx2b.upload.chunks[_0xa07dx5].progress !== undefined) { _0xa07dx2b.upload.progress += _0xa07dx2b.upload.chunks[_0xa07dx5].progress; _0xa07dx2b.upload.total += _0xa07dx2b.upload.chunks[_0xa07dx5].total; _0xa07dx2b.upload.bytesSent += _0xa07dx2b.upload.chunks[_0xa07dx5].bytesSent } }; _0xa07dx2b.upload.progress = _0xa07dx2b.upload.progress / _0xa07dx2b.upload.totalChunkCount } else { for (var _0xa07dx166 = _0xa07dx27, _0xa07dx167 = true, _0xa07dx168 = 0, _0xa07dx166 = _0xa07dx167 ? _0xa07dx166 : _0xa07dx166[Symbol.iterator](); ;) { var _0xa07dx169; if (_0xa07dx167) { if (_0xa07dx168 >= _0xa07dx166.length) { break }; _0xa07dx169 = _0xa07dx166[_0xa07dx168++] } else { _0xa07dx168 = _0xa07dx166.next(); if (_0xa07dx168.done) { break }; _0xa07dx169 = _0xa07dx168.value }; var _0xa07dx16a = _0xa07dx169; _0xa07dx16a.upload.progress = _0xa07dx6a; _0xa07dx16a.upload.total = _0xa07dx3f.total; _0xa07dx16a.upload.bytesSent = _0xa07dx3f.loaded } }; for (var _0xa07dx16b = _0xa07dx27, _0xa07dx16c = true, _0xa07dx16d = 0, _0xa07dx16b = _0xa07dx16c ? _0xa07dx16b : _0xa07dx16b[Symbol.iterator](); ;) { var _0xa07dx16e; if (_0xa07dx16c) { if (_0xa07dx16d >= _0xa07dx16b.length) { break }; _0xa07dx16e = _0xa07dx16b[_0xa07dx16d++] } else { _0xa07dx16d = _0xa07dx16b.next(); if (_0xa07dx16d.done) { break }; _0xa07dx16e = _0xa07dx16d.value }; var _0xa07dx16f = _0xa07dx16e; this.emit("uploadprogress", _0xa07dx16f, _0xa07dx16f.upload.progress, _0xa07dx16f.upload.bytesSent) } } else { var _0xa07dx170 = true; _0xa07dx6a = 100; for (var _0xa07dx171 = _0xa07dx27, _0xa07dx172 = true, _0xa07dx173 = 0, _0xa07dx171 = _0xa07dx172 ? _0xa07dx171 : _0xa07dx171[Symbol.iterator](); ;) { var _0xa07dx174; if (_0xa07dx172) { if (_0xa07dx173 >= _0xa07dx171.length) { break }; _0xa07dx174 = _0xa07dx171[_0xa07dx173++] } else { _0xa07dx173 = _0xa07dx171.next(); if (_0xa07dx173.done) { break }; _0xa07dx174 = _0xa07dx173.value }; var _0xa07dx175 = _0xa07dx174; if (_0xa07dx175.upload.progress !== 100 || _0xa07dx175.upload.bytesSent !== _0xa07dx175.upload.total) { _0xa07dx170 = false }; _0xa07dx175.upload.progress = _0xa07dx6a; _0xa07dx175.upload.bytesSent = _0xa07dx175.upload.total }; if (_0xa07dx170) { return }; for (var _0xa07dx176 = _0xa07dx27, _0xa07dx177 = true, _0xa07dx178 = 0, _0xa07dx176 = _0xa07dx177 ? _0xa07dx176 : _0xa07dx176[Symbol.iterator](); ;) { var _0xa07dx179; if (_0xa07dx177) { if (_0xa07dx178 >= _0xa07dx176.length) { break }; _0xa07dx179 = _0xa07dx176[_0xa07dx178++] } else { _0xa07dx178 = _0xa07dx176.next(); if (_0xa07dx178.done) { break }; _0xa07dx179 = _0xa07dx178.value }; var _0xa07dx17a = _0xa07dx179; this.emit("uploadprogress", _0xa07dx17a, _0xa07dx6a, _0xa07dx17a.upload.bytesSent) } } } }, { key: "_finishedUploading", value: function _0xa07dx17b(_0xa07dx27, _0xa07dx28, _0xa07dx3f) { var _0xa07dx17c = void (0); if (_0xa07dx27[0].status === Dropzone.CANCELED) { return }; if (_0xa07dx28.readyState !== 4) { return }; if (_0xa07dx28.responseType !== "arraybuffer" && _0xa07dx28.responseType !== "blob") { _0xa07dx17c = _0xa07dx28.responseText; if (_0xa07dx28.getResponseHeader("content-type") && ~_0xa07dx28.getResponseHeader("content-type").indexOf("application/json")) { try { _0xa07dx17c = JSON.parse(_0xa07dx17c) } catch (error) { _0xa07dx3f = error; _0xa07dx17c = "Invalid JSON response from server." } } }; this._updateFilesUploadProgress(_0xa07dx27); if (!(200 <= _0xa07dx28.status && _0xa07dx28.status < 300)) { this._handleUploadError(_0xa07dx27, _0xa07dx28, _0xa07dx17c) } else { if (_0xa07dx27[0].upload.chunked) { _0xa07dx27[0].upload.finishedChunkUpload(this._getChunk(_0xa07dx27[0], _0xa07dx28)) } else { this._finished(_0xa07dx27, _0xa07dx17c, _0xa07dx3f) } } } }, { key: "_handleUploadError", value: function _0xa07dx17d(_0xa07dx27, _0xa07dx28, _0xa07dx17c) { if (_0xa07dx27[0].status === Dropzone.CANCELED) { return }; if (_0xa07dx27[0].upload.chunked && this.options.retryChunks) { var _0xa07dx29 = this._getChunk(_0xa07dx27[0], _0xa07dx28); if (_0xa07dx29.retries++ < this.options.retryChunksLimit) { this._uploadData(_0xa07dx27, [_0xa07dx29.dataBlock]); return } else { console.warn("Retried this chunk too often. Giving up.") } }; for (var _0xa07dx17e = _0xa07dx27, _0xa07dx17f = true, _0xa07dx180 = 0, _0xa07dx17e = _0xa07dx17f ? _0xa07dx17e : _0xa07dx17e[Symbol.iterator](); ;) { var _0xa07dx181; if (_0xa07dx17f) { if (_0xa07dx180 >= _0xa07dx17e.length) { break }; _0xa07dx181 = _0xa07dx17e[_0xa07dx180++] } else { _0xa07dx180 = _0xa07dx17e.next(); if (_0xa07dx180.done) { break }; _0xa07dx181 = _0xa07dx180.value }; var _0xa07dx2b = _0xa07dx181; this._errorProcessing(_0xa07dx27, _0xa07dx17c || this.options.dictResponseError.replace("{{statusCode}}", _0xa07dx28.status), _0xa07dx28) } } }, { key: "submitRequest", value: function _0xa07dx182(_0xa07dx28, _0xa07dx14a, _0xa07dx27) { _0xa07dx28.send(_0xa07dx14a) } }, { key: "_finished", value: function _0xa07dx183(_0xa07dx27, _0xa07dx184, _0xa07dx3f) { for (var _0xa07dx185 = _0xa07dx27, _0xa07dx186 = true, _0xa07dx187 = 0, _0xa07dx185 = _0xa07dx186 ? _0xa07dx185 : _0xa07dx185[Symbol.iterator](); ;) { var _0xa07dx188; if (_0xa07dx186) { if (_0xa07dx187 >= _0xa07dx185.length) { break }; _0xa07dx188 = _0xa07dx185[_0xa07dx187++] } else { _0xa07dx187 = _0xa07dx185.next(); if (_0xa07dx187.done) { break }; _0xa07dx188 = _0xa07dx187.value }; var _0xa07dx2b = _0xa07dx188; _0xa07dx2b.status = Dropzone.SUCCESS; this.emit("success", _0xa07dx2b, _0xa07dx184, _0xa07dx3f); this.emit("complete", _0xa07dx2b) }; if (this.options.uploadMultiple) { this.emit("successmultiple", _0xa07dx27, _0xa07dx184, _0xa07dx3f); this.emit("completemultiple", _0xa07dx27) }; if (this.options.autoProcessQueue) { return this.processQueue() } } }, { key: "_errorProcessing", value: function _0xa07dx189(_0xa07dx27, _0xa07dx61, _0xa07dx28) { for (var _0xa07dx18a = _0xa07dx27, _0xa07dx18b = true, _0xa07dx18c = 0, _0xa07dx18a = _0xa07dx18b ? _0xa07dx18a : _0xa07dx18a[Symbol.iterator](); ;) { var _0xa07dx18d; if (_0xa07dx18b) { if (_0xa07dx18c >= _0xa07dx18a.length) { break }; _0xa07dx18d = _0xa07dx18a[_0xa07dx18c++] } else { _0xa07dx18c = _0xa07dx18a.next(); if (_0xa07dx18c.done) { break }; _0xa07dx18d = _0xa07dx18c.value }; var _0xa07dx2b = _0xa07dx18d; _0xa07dx2b.status = Dropzone.ERROR; this.emit("error", _0xa07dx2b, _0xa07dx61, _0xa07dx28); this.emit("complete", _0xa07dx2b) }; if (this.options.uploadMultiple) { this.emit("errormultiple", _0xa07dx27, _0xa07dx61, _0xa07dx28); this.emit("completemultiple", _0xa07dx27) }; if (this.options.autoProcessQueue) { return this.processQueue() } } }], [{ key: "uuidv4", value: function _0xa07dx18e() { return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (_0xa07dx18f) { var _0xa07dx190 = Math.random() * 16 | 0, _0xa07dx191 = _0xa07dx18f === "x" ? _0xa07dx190 : _0xa07dx190 & 0x3 | 0x8; return _0xa07dx191.toString(16) }) } }]); return Dropzone }(Emitter); Dropzone.initClass(); Dropzone.version = "5.4.0"; Dropzone.options = {}; Dropzone.optionsForElement = function (_0xa07dxc9) { if (_0xa07dxc9.getAttribute("id")) { return Dropzone.options[camelize(_0xa07dxc9.getAttribute("id"))] } else { return undefined } }; Dropzone.instances = []; Dropzone.forElement = function (_0xa07dxc9) { if (typeof _0xa07dxc9 === "string") { _0xa07dxc9 = document.querySelector(_0xa07dxc9) }; if ((_0xa07dxc9 != null ? _0xa07dxc9.dropzone : undefined) == null) { throw new Error("No Dropzone found for given element. This is probably because you're trying to access it before Dropzone had the time to initialize. Use the `init` option to setup any additional observers on your Dropzone.") }; return _0xa07dxc9.dropzone }; Dropzone.autoDiscover = true; Dropzone.discover = function () { var _0xa07dx192 = void (0); if (document.querySelectorAll) { _0xa07dx192 = document.querySelectorAll(".dropzone") } else { _0xa07dx192 = []; var _0xa07dx193 = function _0xa07dx193(_0xa07dxba) { return function () { var _0xa07dxc4 = []; for (var _0xa07dx194 = _0xa07dxba, _0xa07dx195 = true, _0xa07dx196 = 0, _0xa07dx194 = _0xa07dx195 ? _0xa07dx194 : _0xa07dx194[Symbol.iterator](); ;) { var _0xa07dx197; if (_0xa07dx195) { if (_0xa07dx196 >= _0xa07dx194.length) { break }; _0xa07dx197 = _0xa07dx194[_0xa07dx196++] } else { _0xa07dx196 = _0xa07dx194.next(); if (_0xa07dx196.done) { break }; _0xa07dx197 = _0xa07dx196.value }; var _0xa07dx88 = _0xa07dx197; if (/(^| )dropzone($| )/.test(_0xa07dx88.className)) { _0xa07dxc4.push(_0xa07dx192.push(_0xa07dx88)) } else { _0xa07dxc4.push(undefined) } }; return _0xa07dxc4 }() }; _0xa07dx193(document.getElementsByTagName("div")); _0xa07dx193(document.getElementsByTagName("form")) }; return function () { var _0xa07dxc4 = []; for (var _0xa07dx198 = _0xa07dx192, _0xa07dx199 = true, _0xa07dx19a = 0, _0xa07dx198 = _0xa07dx199 ? _0xa07dx198 : _0xa07dx198[Symbol.iterator](); ;) { var _0xa07dx19b; if (_0xa07dx199) { if (_0xa07dx19a >= _0xa07dx198.length) { break }; _0xa07dx19b = _0xa07dx198[_0xa07dx19a++] } else { _0xa07dx19a = _0xa07dx198.next(); if (_0xa07dx19a.done) { break }; _0xa07dx19b = _0xa07dx19a.value }; var _0xa07dx19c = _0xa07dx19b; if (Dropzone.optionsForElement(_0xa07dx19c) !== false) { _0xa07dxc4.push(new Dropzone(_0xa07dx19c)) } else { _0xa07dxc4.push(undefined) } }; return _0xa07dxc4 }() }; Dropzone.blacklistedBrowsers = [/opera.*(Macintosh|Windows Phone).*version\/12/i]; Dropzone.isBrowserSupported = function () { var _0xa07dx19d = true; if (window.File && window.FileReader && window.FileList && window.Blob && window.FormData && document.querySelector) { if (!("classList" in document.createElement("a"))) { _0xa07dx19d = false } else { for (var _0xa07dx19e = Dropzone.blacklistedBrowsers, _0xa07dx19f = true, _0xa07dx1a0 = 0, _0xa07dx19e = _0xa07dx19f ? _0xa07dx19e : _0xa07dx19e[Symbol.iterator](); ;) { var _0xa07dx1a1; if (_0xa07dx19f) { if (_0xa07dx1a0 >= _0xa07dx19e.length) { break }; _0xa07dx1a1 = _0xa07dx19e[_0xa07dx1a0++] } else { _0xa07dx1a0 = _0xa07dx19e.next(); if (_0xa07dx1a0.done) { break }; _0xa07dx1a1 = _0xa07dx1a0.value }; var _0xa07dx1a2 = _0xa07dx1a1; if (_0xa07dx1a2.test(navigator.userAgent)) { _0xa07dx19d = false; continue } } } } else { _0xa07dx19d = false }; return _0xa07dx19d }; Dropzone.dataURItoBlob = function (_0xa07dx1a3) { var _0xa07dx1a4 = atob(_0xa07dx1a3.split(",")[1]); var _0xa07dx1a5 = _0xa07dx1a3.split(",")[0].split(":")[1].split(";")[0]; var _0xa07dx1a6 = new ArrayBuffer(_0xa07dx1a4.length); var _0xa07dx1a7 = new Uint8Array(_0xa07dx1a6); for (var _0xa07dx5 = 0, _0xa07dx138 = _0xa07dx1a4.length, _0xa07dx1a8 = 0 <= _0xa07dx138; _0xa07dx1a8 ? _0xa07dx5 <= _0xa07dx138 : _0xa07dx5 >= _0xa07dx138; _0xa07dx1a8 ? _0xa07dx5++ : _0xa07dx5--) { _0xa07dx1a7[_0xa07dx5] = _0xa07dx1a4.charCodeAt(_0xa07dx5) }; return new Blob([_0xa07dx1a6], { type: _0xa07dx1a5 }) }; var without = function without(_0xa07dx1aa, _0xa07dx1ab) { return _0xa07dx1aa.filter(function (_0xa07dxe0) { return _0xa07dxe0 !== _0xa07dx1ab }).map(function (_0xa07dxe0) { return _0xa07dxe0 }) }; var camelize = function camelize(_0xa07dx1ad) { return _0xa07dx1ad.replace(/[\-_](\w)/g, function (_0xa07dx1ae) { return _0xa07dx1ae.charAt(1).toUpperCase() }) }; Dropzone.createElement = function (_0xa07dx1af) { var _0xa07dx1b0 = document.createElement("div"); _0xa07dx1b0.innerHTML = _0xa07dx1af; return _0xa07dx1b0.childNodes[0] }; Dropzone.elementInside = function (_0xa07dxc9, _0xa07dx1b1) { if (_0xa07dxc9 === _0xa07dx1b1) { return true }; while (_0xa07dxc9 = _0xa07dxc9.parentNode) { if (_0xa07dxc9 === _0xa07dx1b1) { return true } }; return false }; Dropzone.getElement = function (_0xa07dx88, _0xa07dx1b2) { var _0xa07dxc9 = void (0); if (typeof _0xa07dx88 === "string") { _0xa07dxc9 = document.querySelector(_0xa07dx88) } else { if (_0xa07dx88.nodeType != null) { _0xa07dxc9 = _0xa07dx88 } }; if (_0xa07dxc9 == null) { throw new Error("Invalid `" + _0xa07dx1b2 + "` option provided. Please provide a CSS selector or a plain HTML element.") }; return _0xa07dxc9 }; Dropzone.getElements = function (_0xa07dx1b3, _0xa07dx1b2) { var _0xa07dx88 = void (0), _0xa07dxba = void (0); if (_0xa07dx1b3 instanceof Array) { _0xa07dxba = []; try { for (var _0xa07dx1b4 = _0xa07dx1b3, _0xa07dx1b5 = true, _0xa07dx1b6 = 0, _0xa07dx1b4 = _0xa07dx1b5 ? _0xa07dx1b4 : _0xa07dx1b4[Symbol.iterator](); ;) { if (_0xa07dx1b5) { if (_0xa07dx1b6 >= _0xa07dx1b4.length) { break }; _0xa07dx88 = _0xa07dx1b4[_0xa07dx1b6++] } else { _0xa07dx1b6 = _0xa07dx1b4.next(); if (_0xa07dx1b6.done) { break }; _0xa07dx88 = _0xa07dx1b6.value }; _0xa07dxba.push(this.getElement(_0xa07dx88, _0xa07dx1b2)) } } catch (e) { _0xa07dxba = null } } else { if (typeof _0xa07dx1b3 === "string") { _0xa07dxba = []; for (var _0xa07dx1b7 = document.querySelectorAll(_0xa07dx1b3), _0xa07dx1b8 = true, _0xa07dx1b9 = 0, _0xa07dx1b7 = _0xa07dx1b8 ? _0xa07dx1b7 : _0xa07dx1b7[Symbol.iterator](); ;) { if (_0xa07dx1b8) { if (_0xa07dx1b9 >= _0xa07dx1b7.length) { break }; _0xa07dx88 = _0xa07dx1b7[_0xa07dx1b9++] } else { _0xa07dx1b9 = _0xa07dx1b7.next(); if (_0xa07dx1b9.done) { break }; _0xa07dx88 = _0xa07dx1b9.value }; _0xa07dxba.push(_0xa07dx88) } } else { if (_0xa07dx1b3.nodeType != null) { _0xa07dxba = [_0xa07dx1b3] } } }; if (_0xa07dxba == null || !_0xa07dxba.length) { throw new Error("Invalid `" + _0xa07dx1b2 + "` option provided. Please provide a CSS selector, a plain HTML element or a list of those.") }; return _0xa07dxba }; Dropzone.confirm = function (_0xa07dx1ba, _0xa07dx1bb, _0xa07dx1bc) { if (window.confirm(_0xa07dx1ba)) { return _0xa07dx1bb() } else { if (_0xa07dx1bc != null) { return _0xa07dx1bc() } } }; Dropzone.isValidFile = function (_0xa07dx2b, _0xa07dx1bd) { if (!_0xa07dx1bd) { return true }; _0xa07dx1bd = _0xa07dx1bd.split(","); var _0xa07dx1be = _0xa07dx2b.type; var _0xa07dx1bf = _0xa07dx1be.replace(/\/.*$/, ""); for (var _0xa07dx1c0 = _0xa07dx1bd, _0xa07dx1c1 = true, _0xa07dx1c2 = 0, _0xa07dx1c0 = _0xa07dx1c1 ? _0xa07dx1c0 : _0xa07dx1c0[Symbol.iterator](); ;) { var _0xa07dx1c3; if (_0xa07dx1c1) { if (_0xa07dx1c2 >= _0xa07dx1c0.length) { break }; _0xa07dx1c3 = _0xa07dx1c0[_0xa07dx1c2++] } else { _0xa07dx1c2 = _0xa07dx1c0.next(); if (_0xa07dx1c2.done) { break }; _0xa07dx1c3 = _0xa07dx1c2.value }; var _0xa07dx1c4 = _0xa07dx1c3; _0xa07dx1c4 = _0xa07dx1c4.trim(); if (_0xa07dx1c4.charAt(0) === ".") { if (_0xa07dx2b.name.toLowerCase().indexOf(_0xa07dx1c4.toLowerCase(), _0xa07dx2b.name.length - _0xa07dx1c4.length) !== -1) { return true } } else { if (/\/\*$/.test(_0xa07dx1c4)) { if (_0xa07dx1bf === _0xa07dx1c4.replace(/\/.*$/, "")) { return true } } else { if (_0xa07dx1be === _0xa07dx1c4) { return true } } } }; return false }; if (typeof jQuery !== "undefined" && jQuery !== null) { jQuery.fn.dropzone = function (_0xa07dx89) { return this.each(function () { return new Dropzone(this, _0xa07dx89) }) } }; if (typeof module !== "undefined" && module !== null) { module.exports = Dropzone } else { window.Dropzone = Dropzone }; Dropzone.ADDED = "added"; Dropzone.QUEUED = "queued"; Dropzone.ACCEPTED = Dropzone.QUEUED; Dropzone.UPLOADING = "uploading"; Dropzone.PROCESSING = Dropzone.UPLOADING; Dropzone.CANCELED = "canceled"; Dropzone.ERROR = "error"; Dropzone.SUCCESS = "success"; var detectVerticalSquash = function detectVerticalSquash(_0xa07dx10f) { var _0xa07dx1c6 = _0xa07dx10f.naturalWidth; var _0xa07dx1c7 = _0xa07dx10f.naturalHeight; var _0xa07dx105 = document.createElement("canvas"); _0xa07dx105.width = 1; _0xa07dx105.height = _0xa07dx1c7; var _0xa07dx113 = _0xa07dx105.getContext("2d"); _0xa07dx113.drawImage(_0xa07dx10f, 0, 0); var _0xa07dx1c8 = _0xa07dx113.getImageData(1, 0, 1, _0xa07dx1c7), _0xa07dx1c9 = _0xa07dx1c8.data; var _0xa07dx1ca = 0; var _0xa07dx1cb = _0xa07dx1c7; var _0xa07dx1cc = _0xa07dx1c7; while (_0xa07dx1cc > _0xa07dx1ca) { var _0xa07dx1cd = _0xa07dx1c9[(_0xa07dx1cc - 1) * 4 + 3]; if (_0xa07dx1cd === 0) { _0xa07dx1cb = _0xa07dx1cc } else { _0xa07dx1ca = _0xa07dx1cc }; _0xa07dx1cc = _0xa07dx1cb + _0xa07dx1ca >> 1 }; var _0xa07dx1ce = _0xa07dx1cc / _0xa07dx1c7; if (_0xa07dx1ce === 0) { return 1 } else { return _0xa07dx1ce } }; var drawImageIOSFix = function drawImageIOSFix(_0xa07dx113, _0xa07dx10f, _0xa07dx1d0, _0xa07dx1ca, _0xa07dx1d1, _0xa07dx1d2, _0xa07dx1d3, _0xa07dx1d4, _0xa07dx1d5, _0xa07dx1d6) { var _0xa07dx1d7 = detectVerticalSquash(_0xa07dx10f); return _0xa07dx113.drawImage(_0xa07dx10f, _0xa07dx1d0, _0xa07dx1ca, _0xa07dx1d1, _0xa07dx1d2, _0xa07dx1d3, _0xa07dx1d4, _0xa07dx1d5, _0xa07dx1d6 / _0xa07dx1d7) }; var ExifRestore = function () { function ExifRestore() { _classCallCheck(this, ExifRestore) } _createClass(ExifRestore, null, [{ key: "initClass", value: function _0xa07dx24() { this.KEY_STR = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=" } }, { key: "encode64", value: function _0xa07dx1d9(_0xa07dx15b) { var _0xa07dx1da = ""; var _0xa07dx1db = undefined; var _0xa07dx1dc = undefined; var _0xa07dx1dd = ""; var _0xa07dx1de = undefined; var _0xa07dx1df = undefined; var _0xa07dx1e0 = undefined; var _0xa07dx1e1 = ""; var _0xa07dx5 = 0; while (true) { _0xa07dx1db = _0xa07dx15b[_0xa07dx5++]; _0xa07dx1dc = _0xa07dx15b[_0xa07dx5++]; _0xa07dx1dd = _0xa07dx15b[_0xa07dx5++]; _0xa07dx1de = _0xa07dx1db >> 2; _0xa07dx1df = (_0xa07dx1db & 3) << 4 | _0xa07dx1dc >> 4; _0xa07dx1e0 = (_0xa07dx1dc & 15) << 2 | _0xa07dx1dd >> 6; _0xa07dx1e1 = _0xa07dx1dd & 63; if (isNaN(_0xa07dx1dc)) { _0xa07dx1e0 = _0xa07dx1e1 = 64 } else { if (isNaN(_0xa07dx1dd)) { _0xa07dx1e1 = 64 } }; _0xa07dx1da = _0xa07dx1da + this.KEY_STR.charAt(_0xa07dx1de) + this.KEY_STR.charAt(_0xa07dx1df) + this.KEY_STR.charAt(_0xa07dx1e0) + this.KEY_STR.charAt(_0xa07dx1e1); _0xa07dx1db = _0xa07dx1dc = _0xa07dx1dd = ""; _0xa07dx1de = _0xa07dx1df = _0xa07dx1e0 = _0xa07dx1e1 = ""; if (!(_0xa07dx5 < _0xa07dx15b.length)) { break } }; return _0xa07dx1da } }, { key: "restore", value: function _0xa07dx1e2(_0xa07dx1e3, _0xa07dx1e4) { if (!_0xa07dx1e3.match("data:image/jpeg;base64,")) { return _0xa07dx1e4 }; var _0xa07dx1e5 = this.decode64(_0xa07dx1e3.replace("data:image/jpeg;base64,", "")); var _0xa07dx1e6 = this.slice2Segments(_0xa07dx1e5); var _0xa07dx1e7 = this.exifManipulation(_0xa07dx1e4, _0xa07dx1e6); return "data:image/jpeg;base64," + this.encode64(_0xa07dx1e7) } }, { key: "exifManipulation", value: function _0xa07dx1e8(_0xa07dx1e4, _0xa07dx1e6) { var _0xa07dx1e9 = this.getExifArray(_0xa07dx1e6); var _0xa07dx1ea = this.insertExif(_0xa07dx1e4, _0xa07dx1e9); var _0xa07dx1eb = new Uint8Array(_0xa07dx1ea); return _0xa07dx1eb } }, { key: "getExifArray", value: function _0xa07dx1ec(_0xa07dx1e6) { var _0xa07dx1ed = undefined; var _0xa07dxd4 = 0; while (_0xa07dxd4 < _0xa07dx1e6.length) { _0xa07dx1ed = _0xa07dx1e6[_0xa07dxd4]; if (_0xa07dx1ed[0] === 255 & _0xa07dx1ed[1] === 225) { return _0xa07dx1ed }; _0xa07dxd4++ }; return [] } }, { key: "insertExif", value: function _0xa07dx1ee(_0xa07dx1e4, _0xa07dx1e9) { var _0xa07dx1ef = _0xa07dx1e4.replace("data:image/jpeg;base64,", ""); var _0xa07dx1f0 = this.decode64(_0xa07dx1ef); var _0xa07dx1f1 = _0xa07dx1f0.indexOf(255, 3); var _0xa07dx1f2 = _0xa07dx1f0.slice(0, _0xa07dx1f1); var _0xa07dx1f3 = _0xa07dx1f0.slice(_0xa07dx1f1); var _0xa07dx1f4 = _0xa07dx1f2; _0xa07dx1f4 = _0xa07dx1f4.concat(_0xa07dx1e9); _0xa07dx1f4 = _0xa07dx1f4.concat(_0xa07dx1f3); return _0xa07dx1f4 } }, { key: "slice2Segments", value: function _0xa07dx1f5(_0xa07dx1f6) { var _0xa07dx1f7 = 0; var _0xa07dx1e6 = []; while (true) { var _0xa07dx1f8; if (_0xa07dx1f6[_0xa07dx1f7] === 255 & _0xa07dx1f6[_0xa07dx1f7 + 1] === 218) { break }; if (_0xa07dx1f6[_0xa07dx1f7] === 255 & _0xa07dx1f6[_0xa07dx1f7 + 1] === 216) { _0xa07dx1f7 += 2 } else { _0xa07dx1f8 = _0xa07dx1f6[_0xa07dx1f7 + 2] * 256 + _0xa07dx1f6[_0xa07dx1f7 + 3]; var _0xa07dx1f9 = _0xa07dx1f7 + _0xa07dx1f8 + 2; var _0xa07dx1ed = _0xa07dx1f6.slice(_0xa07dx1f7, _0xa07dx1f9); _0xa07dx1e6.push(_0xa07dx1ed); _0xa07dx1f7 = _0xa07dx1f9 }; if (_0xa07dx1f7 > _0xa07dx1f6.length) { break } }; return _0xa07dx1e6 } }, { key: "decode64", value: function _0xa07dx1fa(_0xa07dx15b) { var _0xa07dx1da = ""; var _0xa07dx1db = undefined; var _0xa07dx1dc = undefined; var _0xa07dx1dd = ""; var _0xa07dx1de = undefined; var _0xa07dx1df = undefined; var _0xa07dx1e0 = undefined; var _0xa07dx1e1 = ""; var _0xa07dx5 = 0; var _0xa07dx1f0 = []; var _0xa07dx1fb = /[^A-Za-z0-9\+\/\=]/g; if (_0xa07dx1fb.exec(_0xa07dx15b)) { console.warn("There were invalid base64 characters in the input text.\nValid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\nExpect errors in decoding.") }; _0xa07dx15b = _0xa07dx15b.replace(/[^A-Za-z0-9\+\/\=]/g, ""); while (true) { _0xa07dx1de = this.KEY_STR.indexOf(_0xa07dx15b.charAt(_0xa07dx5++)); _0xa07dx1df = this.KEY_STR.indexOf(_0xa07dx15b.charAt(_0xa07dx5++)); _0xa07dx1e0 = this.KEY_STR.indexOf(_0xa07dx15b.charAt(_0xa07dx5++)); _0xa07dx1e1 = this.KEY_STR.indexOf(_0xa07dx15b.charAt(_0xa07dx5++)); _0xa07dx1db = _0xa07dx1de << 2 | _0xa07dx1df >> 4; _0xa07dx1dc = (_0xa07dx1df & 15) << 4 | _0xa07dx1e0 >> 2; _0xa07dx1dd = (_0xa07dx1e0 & 3) << 6 | _0xa07dx1e1; _0xa07dx1f0.push(_0xa07dx1db); if (_0xa07dx1e0 !== 64) { _0xa07dx1f0.push(_0xa07dx1dc) }; if (_0xa07dx1e1 !== 64) { _0xa07dx1f0.push(_0xa07dx1dd) }; _0xa07dx1db = _0xa07dx1dc = _0xa07dx1dd = ""; _0xa07dx1de = _0xa07dx1df = _0xa07dx1e0 = _0xa07dx1e1 = ""; if (!(_0xa07dx5 < _0xa07dx15b.length)) { break } }; return _0xa07dx1f0 } }]); return ExifRestore }(); ExifRestore.initClass(); var contentLoaded = function contentLoaded(_0xa07dx1fd, _0xa07dx15) { var _0xa07dx2c = false; var _0xa07dx1fe = true; var _0xa07dx1ff = _0xa07dx1fd.document; var _0xa07dx200 = _0xa07dx1ff.documentElement; var _0xa07dx201 = _0xa07dx1ff.addEventListener ? "addEventListener" : "attachEvent"; var _0xa07dx202 = _0xa07dx1ff.addEventListener ? "removeEventListener" : "detachEvent"; var _0xa07dx203 = _0xa07dx1ff.addEventListener ? "" : "on"; var _0xa07dx25 = function _0xa07dx25(_0xa07dx3f) { if (_0xa07dx3f.type === "readystatechange" && _0xa07dx1ff.readyState !== "complete") { return }; (_0xa07dx3f.type === "load" ? _0xa07dx1fd : _0xa07dx1ff)[_0xa07dx202](_0xa07dx203 + _0xa07dx3f.type, _0xa07dx25, false); if (!_0xa07dx2c && (_0xa07dx2c = true)) { return _0xa07dx15.call(_0xa07dx1fd, _0xa07dx3f.type || _0xa07dx3f) } }; var _0xa07dx204 = function _0xa07dx204() { try { _0xa07dx200.doScroll("left") } catch (e) { setTimeout(_0xa07dx204, 50); return }; return _0xa07dx25("poll") }; if (_0xa07dx1ff.readyState !== "complete") { if (_0xa07dx1ff.createEventObject && _0xa07dx200.doScroll) { try { _0xa07dx1fe = !_0xa07dx1fd.frameElement } catch (error) { }; if (_0xa07dx1fe) { _0xa07dx204() } }; _0xa07dx1ff[_0xa07dx201](_0xa07dx203 + "DOMContentLoaded", _0xa07dx25, false); _0xa07dx1ff[_0xa07dx201](_0xa07dx203 + "readystatechange", _0xa07dx25, false); return _0xa07dx1fd[_0xa07dx201](_0xa07dx203 + "load", _0xa07dx25, false) } }; Dropzone._autoDiscoverFunction = function () { if (Dropzone.autoDiscover) { return Dropzone.discover() } }; contentLoaded(window, Dropzone._autoDiscoverFunction); function __guard__(_0xa07dx14c, _0xa07dx206) { return typeof _0xa07dx14c !== "undefined" && _0xa07dx14c !== null ? _0xa07dx206(_0xa07dx14c) : undefined } function __guardMethod__(_0xa07dx208, _0xa07dx209, _0xa07dx206) { if (typeof _0xa07dx208 !== "undefined" && _0xa07dx208 !== null && typeof _0xa07dx208[_0xa07dx209] === "function") { return _0xa07dx206(_0xa07dx208, _0xa07dx209) } else { return undefined } }